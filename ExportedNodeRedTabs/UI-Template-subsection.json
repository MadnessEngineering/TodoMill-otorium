[
    {
        "id": "7f3d19dc6b21c563",
        "type": "group",
        "z": "e890cb64b583ae67",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8d670b8299f89a5b",
            "efbe7226e450cc80",
            "75fd102f9bbc89f7",
            "9a892952c84e8362",
            "98c0aca7ec2161cc",
            "31514c435b15540f",
            "aa3c19870a047f03",
            "331cb971cae4185d",
            "3b8a43150f8ef5db"
        ],
        "x": 44,
        "y": 1059,
        "w": 672,
        "h": 162
    },
    {
        "id": "8d670b8299f89a5b",
        "type": "link in",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "dashboard-sub",
        "links": [
            "6822c3f04ab49643",
            "fea965811933e941",
            "c714b17a4d69317e",
            "67f56759fa751ebf",
            "7c064436f034e61c",
            "269581e68f7b96f8"
        ],
        "x": 85,
        "y": 1120,
        "wires": [
            [
                "efbe7226e450cc80"
            ]
        ]
    },
    {
        "id": "efbe7226e450cc80",
        "type": "switch",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "Route by Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "todo/dashboard/todos",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/dashboard/editor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/dashboard/suggestions",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/dashboard/insights",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 210,
        "y": 1120,
        "wires": [
            [
                "75fd102f9bbc89f7"
            ],
            [
                "9a892952c84e8362"
            ],
            [],
            []
        ]
    },
    {
        "id": "75fd102f9bbc89f7",
        "type": "ui_template",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "group": "g-todos",
        "name": "Todo List",
        "order": 20,
        "width": 16,
        "height": 23,
        "format": "<!-- Todo List Panel for FastMCP Todo Server Dashboard -->\n\n<style>\n    .todo-container {\n        font-family: 'Roboto', sans-serif;\n        padding: 0 10px;\n    }\n\n    .todo-stats {\n        background-color: #f5f5f5;\n        border-radius: 8px;\n        padding: 15px;\n        margin-bottom: 20px;\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .stats-item {\n        margin-right: 25px;\n        margin-bottom: 10px;\n        text-align: center;\n    }\n\n    .stats-value {\n        font-size: 24px;\n        font-weight: 500;\n        color: #212121;\n        margin-bottom: 5px;\n    }\n\n    .stats-label {\n        font-size: 13px;\n        color: #757575;\n    }\n\n    .todo-actions {\n        margin-bottom: 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .filter-options {\n        display: flex;\n        gap: 10px;\n    }\n\n    .filter-button {\n        padding: 6px 12px;\n        border-radius: 16px;\n        border: 1px solid #e0e0e0;\n        background-color: white;\n        font-size: 13px;\n        cursor: pointer;\n        transition: all 0.2s;\n    }\n\n    .filter-button:hover {\n        background-color: #f5f5f5;\n    }\n\n    .filter-button.active {\n        background-color: #e3f2fd;\n        border-color: #90caf9;\n        color: #1976d2;\n    }\n\n    .search-field {\n        position: relative;\n        flex-grow: 1;\n        max-width: 300px;\n        margin-left: 10px;\n    }\n\n    .search-field input {\n        width: 100%;\n        padding: 8px 12px 8px 35px;\n        border-radius: 20px;\n        border: 1px solid #e0e0e0;\n        font-size: 14px;\n    }\n\n    .search-icon {\n        position: absolute;\n        left: 12px;\n        top: 50%;\n        transform: translateY(-50%);\n        color: #9e9e9e;\n        font-size: 16px;\n    }\n\n    .todo-list {\n        margin-bottom: 20px;\n    }\n\n    .todo-item {\n        margin-bottom: 15px;\n        padding: 0;\n        border-radius: 8px;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);\n        background-color: white;\n        transition: all 0.3s ease;\n        overflow: hidden;\n    }\n\n    .todo-item:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .todo-item.high {\n        border-left: 6px solid #e53935;\n    }\n\n    .todo-item.medium,\n    .todo-item.initial {\n        border-left: 6px solid #fb8c00;\n    }\n\n    .todo-item.low {\n        border-left: 6px solid #43a047;\n    }\n\n    .todo-content {\n        padding: 15px;\n        cursor: pointer;\n    }\n\n    .todo-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 10px;\n    }\n\n    .todo-title {\n        font-weight: 500;\n        font-size: 16px;\n        color: #212121;\n        margin-right: 10px;\n        word-break: break-word;\n    }\n\n    .todo-meta {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 8px;\n        align-items: center;\n        margin-top: 10px;\n        color: #757575;\n        font-size: 13px;\n    }\n\n    .todo-priority {\n        font-size: 12px;\n        text-transform: uppercase;\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-weight: 500;\n        flex-shrink: 0;\n    }\n\n    .todo-item.high .todo-priority {\n        background-color: #ffebee;\n        color: #c62828;\n    }\n\n    .todo-item.medium .todo-priority,\n    .todo-item.initial .todo-priority {\n        background-color: #fff3e0;\n        color: #e65100;\n    }\n\n    .todo-item.low .todo-priority {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .todo-date {\n        color: #757575;\n        font-size: 13px;\n        flex-shrink: 0;\n    }\n\n    .todo-id {\n        font-size: 12px;\n        color: #9e9e9e;\n        font-family: monospace;\n    }\n\n    .todo-buttons {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 8px;\n        padding: 0 15px 15px 15px;\n    }\n\n    .action-button {\n        padding: 6px 12px;\n        border-radius: 4px;\n        font-size: 13px;\n        text-transform: uppercase;\n        font-weight: 500;\n        border: none;\n        cursor: pointer;\n        transition: background-color 0.2s;\n        display: flex;\n        align-items: center;\n    }\n\n    .action-button .action-icon {\n        margin-right: 6px;\n    }\n\n    .complete-button {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .complete-button:hover {\n        background-color: #c8e6c9;\n    }\n\n    .suggestions-button {\n        background-color: #e3f2fd;\n        color: #1565c0;\n    }\n\n    .suggestions-button:hover {\n        background-color: #bbdefb;\n    }\n\n    .copy-id-button {\n        background-color: #f3e5f5;\n        color: #6a1b9a;\n    }\n\n    .copy-id-button:hover {\n        background-color: #e1bee7;\n    }\n\n    .schedule-button {\n        background-color: #fff3e0;\n        color: #e65100;\n    }\n\n    .schedule-button:hover {\n        background-color: #ffe0b2;\n    }\n\n    .empty-message {\n        color: #757575;\n        font-style: italic;\n        padding: 20px;\n        text-align: center;\n        background-color: #f5f5f5;\n        border-radius: 8px;\n    }\n\n    .recently-completed {\n        margin-top: 30px;\n    }\n\n    .section-header {\n        font-size: 18px;\n        font-weight: 500;\n        color: #424242;\n        margin-bottom: 15px;\n        border-bottom: 2px solid #e0e0e0;\n        padding-bottom: 8px;\n    }\n\n    .completed-item {\n        padding: 10px 15px;\n        border-radius: 8px;\n        background-color: #f5f5f5;\n        margin-bottom: 10px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .completed-title {\n        color: #757575;\n        text-decoration: line-through;\n        margin-right: 10px;\n    }\n\n    .completed-time {\n        font-size: 12px;\n        color: #9e9e9e;\n    }\n\n    /* Project filter badge */\n    .project-filter-badge {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n        padding: 5px 10px;\n        border-radius: 16px;\n        font-size: 14px;\n        font-weight: 500;\n        display: inline-flex;\n        align-items: center;\n        margin-right: 10px;\n    }\n\n    .project-filter-badge i {\n        margin-right: 5px;\n    }\n\n    .project-filter-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 15px;\n    }\n\n    .project-title {\n        font-size: 20px;\n        font-weight: 500;\n        color: #424242;\n    }\n\n    /* Debug info */\n    .debug-info {\n        margin-top: 20px;\n        padding: 10px;\n        background-color: #f8f9fa;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        font-family: monospace;\n        font-size: 12px;\n        white-space: pre-wrap;\n    }\n\n    /* Review status styling */\n    .review {\n        border-left-color: #9c27b0;\n    }\n    \n    .review .todo-priority {\n        background-color: #f3e5f5;\n        color: #6a1b9a;\n    }\n\n    .review-button {\n        background-color: #f3e5f5;\n        color: #6a1b9a;\n    }\n\n    .review-button:hover {\n        background-color: #e1bee7;\n    }\n</style>\n\n<div class=\"todo-container\">\n    <div class=\"project-filter-header\">\n        <div class=\"project-title\">\n            <span ng-if=\"parsedPayload.active_project_filter && parsedPayload.active_project_filter !== 'all'\">\n                <span class=\"project-filter-badge\"><i class=\"fa fa-folder-open\"></i> {{parsedPayload.active_project_filter}}</span>\n                Todo List\n            </span>\n            <span ng-if=\"!parsedPayload.active_project_filter || parsedPayload.active_project_filter === 'all'\">\n                All Projects Todo List\n            </span>\n        </div>\n    </div>\n\n    <div class=\"todo-stats\">\n        <div class=\"stats-item\">\n            <div class=\"stats-value\">{{parsedPayload.total_pending || 0}}</div>\n            <div class=\"stats-label\">Pending Tasks</div>\n        </div>\n\n        <div class=\"stats-item\" ng-if=\"parsedPayload.total_review\">\n            <div class=\"stats-value\" style=\"color: #9c27b0;\">{{parsedPayload.total_review || 0}}</div>\n            <div class=\"stats-label\">In Review</div>\n        </div>\n\n        <div class=\"stats-item\">\n            <div class=\"stats-value\">{{parsedPayload.total_completed || 0}}</div>\n            <div class=\"stats-label\">Completed Tasks</div>\n        </div>\n\n        <div class=\"stats-item\" ng-if=\"parsedPayload.high_priority\">\n            <div class=\"stats-value\" style=\"color: #e53935;\">{{parsedPayload.high_priority || 0}}</div>\n            <div class=\"stats-label\">High Priority</div>\n        </div>\n\n        <div class=\"stats-item\">\n            <div class=\"stats-value\" style=\"color: #fb8c00;\">{{parsedPayload.medium_priority || 0}}</div>\n            <div class=\"stats-label\">Medium Priority</div>\n        </div>\n\n        <div class=\"stats-item\">\n            <div class=\"stats-value\" style=\"color: #43a047;\">{{parsedPayload.low_priority || 0}}</div>\n            <div class=\"stats-label\">Low Priority</div>\n        </div>\n    </div>\n\n    <div class=\"todo-actions\">\n        <div class=\"filter-options\">\n            <button class=\"filter-button active\" ng-click=\"filterTodos('all')\">All</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('high')\">High Priority</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('medium')\">Medium</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('low')\">Low</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('review')\">In Review</button>\n        </div>\n\n        <div class=\"search-field\">\n            <i class=\"fa fa-search search-icon\"></i>\n            <input type=\"text\" placeholder=\"Search tasks...\" ng-model=\"searchText\" />\n        </div>\n    </div>\n\n    <div class=\"todo-list\">\n        <div ng-if=\"parsedPayload.todos && parsedPayload.todos.length > 0\">\n            <div ng-repeat=\"item in parsedPayload.todos | filter:searchFilter\" class=\"todo-item {{item.priority}}\">\n                <div class=\"todo-content\" ng-click=\"item.expanded = !item.expanded\">\n                    <div class=\"todo-header\">\n                        <div class=\"todo-title\">{{item.description}}</div>\n                        <div>\n                            <span class=\"todo-priority\">{{item.priority}}</span>\n                        </div>\n                    </div>\n\n                    <div class=\"todo-meta\">\n                        <span class=\"todo-date\" ng-if=\"item.created_at\">\n            Created: {{item.created_at | date:'MMM d, yyyy'}}\n          </span>\n                        <span ng-if=\"item.project\" style=\"color: #2e7d32; margin-right: 10px;\">\n            <i class=\"fa fa-folder-o\"></i> {{item.project}}\n          </span>\n                        <span class=\"todo-id\" ng-if=\"item.id\">\n            #{{item.id.substring(0,8)}}\n          </span>\n                    </div>\n                </div>\n\n                <div class=\"todo-buttons\">\n                    <button class=\"action-button complete-button\" ng-click=\"send({payload: {action: 'complete', id: item.id}})\">\n          <i class=\"fa fa-check action-icon\"></i> Complete\n        </button>\n                    <button class=\"action-button suggestions-button\" ng-click=\"send({payload: {action: 'suggestions', id: item.id}})\">\n          <i class=\"fa fa-lightbulb-o action-icon\"></i> AI Insights\n        </button>\n                    <button class=\"action-button review-button\" ng-click=\"send({payload: {action: 'review', id: item.id}})\" ng-if=\"item.status !== 'review'\">\n          <i class=\"fa fa-eye action-icon\"></i> Mark for Review\n        </button>\n                    <button class=\"action-button copy-id-button\" ng-click=\"copyToClipboard(item.id)\">\n          <i class=\"fa fa-clipboard action-icon\"></i> Copy ID\n        </button>\n                </div>\n            </div>\n        </div>\n\n        <div ng-if=\"!parsedPayload.todos || parsedPayload.todos.length === 0\" class=\"empty-message\">\n            <p>No pending todo items found.</p>\n            <p ng-if=\"parsedPayload.active_project_filter && parsedPayload.active_project_filter !== 'all'\">\n                Try selecting a different project filter or check \"All Projects\".\n            </p>\n            <p ng-if=\"!parsedPayload.active_project_filter || parsedPayload.active_project_filter === 'all'\">\n                Create new tasks to get started.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"recently-completed\" ng-if=\"parsedPayload.completed && parsedPayload.completed.length > 0\">\n        <h3 class=\"section-header\">Recently Completed</h3>\n        <div ng-repeat=\"item in parsedPayload.completed | limitTo:5\" class=\"completed-item\">\n            <div class=\"completed-title\">{{item.description}}</div>\n            <div class=\"completed-time\" ng-if=\"item.completed_at\">\n                {{item.completed_at | date:'MMM d, h:mm a'}}\n            </div>\n        </div>\n    </div>\n\n    <!-- Debug section to help troubleshoot data flow -->\n    <div class=\"debug-info\">\n        <div>Last Updated: {{parsedPayload.last_updated | date:'MMM d, yyyy h:mm:ss a'}}</div>\n        <div>Topic: {{msg.topic}}</div>\n        <div>Active Project Filter: {{parsedPayload.active_project_filter || 'all'}}</div>\n        <div>Todos Count: {{(parsedPayload.todos || []).length}}</div>\n        <div>Completed Count: {{(parsedPayload.completed || []).length}}</div>\n    </div>\n</div>\n\n<script>\n    (function(scope) {\n  // Parse JSON payload if it's a string\n  scope.$watch('msg.payload', function(payload) {\n    if (payload && typeof payload === 'string') {\n      try {\n        scope.parsedPayload = JSON.parse(payload);\n      } catch(e) {\n        console.error('Error parsing payload JSON:', e);\n        scope.parsedPayload = {};\n      }\n    } else {\n      scope.parsedPayload = payload || {};\n    }\n  });\n\n  // Function to copy todo ID to clipboard and load in editor\n  scope.copyToClipboard = function(id) {\n    console.info(id)\n    if (!id) return;\n\n    // Create a temporary input element\n    var tempInput = document.createElement(\"input\");\n    tempInput.value = id;\n    document.body.appendChild(tempInput);\n\n    // Select and copy the text\n    tempInput.select();\n    document.execCommand(\"copy\");\n\n    // Remove the temporary element\n    document.body.removeChild(tempInput);\n    \n    // Instead of using scope.send which triggers Angular's digest cycle,\n    // use a direct message to avoid refreshing the list\n    var evt = new CustomEvent('node-red-todo-edit', {\n      detail: {\n        id: id\n      }\n    });\n    document.dispatchEvent(evt);\n    \n    // Also create a hidden link to pass the ID directly to the editor tab\n    var editLink = document.createElement(\"a\");\n    editLink.href = \"#edit-tab\";\n    editLink.style.display = \"none\";\n    editLink.setAttribute(\"data-todo-id\", id);\n    editLink.setAttribute(\"data-action\", \"edit\");\n    editLink.setAttribute(\"onclick\", \"setTimeout(function() { this.remove(); }, 100);\");\n    document.body.appendChild(editLink);\n    editLink.click();\n    \n    // Send message to load this todo in the editor via Node-RED\n    // Use a direct approach with a custom event listener\n    var msgData = {\n      topic: \"todo/action/edit\",\n      payload: {id: id}\n    };\n    \n    // Use a timeout to prevent UI refresh issues\n    setTimeout(function() {\n      // Use a custom message passing technique\n      if (window.postMessage) {\n        window.postMessage({\n          type: \"node-red-todo-edit\",\n          data: msgData\n        }, \"*\");\n      }\n      \n      // Fallback to standard send but without applying scope\n      try {\n        scope.send(msgData);\n      } catch (e) {\n        console.error(\"Error sending edit message:\", e);\n      }\n    }, 100);\n\n    // Show non-blocking feedback\n    var notification = document.createElement(\"div\");\n    notification.textContent = \"ID copied to clipboard and loaded in editor: \" + id;\n    notification.style.position = \"fixed\";\n    notification.style.bottom = \"20px\";\n    notification.style.right = \"20px\";\n    notification.style.padding = \"10px 15px\";\n    notification.style.backgroundColor = \"#4CAF50\";\n    notification.style.color = \"white\";\n    notification.style.borderRadius = \"4px\";\n    notification.style.boxShadow = \"0 2px 10px rgba(0,0,0,0.2)\";\n    notification.style.zIndex = \"9999\";\n    document.body.appendChild(notification);\n    \n    // Remove notification after 3 seconds\n    setTimeout(function() {\n      document.body.removeChild(notification);\n    }, 3000);\n    \n    // Prevent event propagation to avoid Angular digest cycle\n    return false;\n  };\n\n  // Initialize active filter\n  scope.activeFilter = 'all';\n  scope.searchText = '';\n\n  // Filter function for todos\n  scope.filterTodos = function(filter) {\n    scope.activeFilter = filter;\n\n    // Update active button styling\n    angular.element(document.querySelectorAll('.filter-button'))\n      .removeClass('active');\n    angular.element(event.target).addClass('active');\n  };\n\n  // Search filter function\n  scope.searchFilter = function(item) {\n    // First apply priority filter\n    if (scope.activeFilter === 'review') {\n      return item.status === 'review';\n    } else if (scope.activeFilter !== 'all' && item.priority !== scope.activeFilter) {\n      return false;\n    }\n\n    // Then apply text search if there is search text\n    if (scope.searchText && scope.searchText.length > 0) {\n      return item.description.toLowerCase().includes(scope.searchText.toLowerCase());\n    }\n\n    return true;\n  };\n})(scope);\n</script>\n\n<!--\nNode-RED Message Format:\n{\n\"todos\": [\n  {\n    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"description\": \"Prepare weekly report\",\n    \"priority\": \"high\",\n    \"status\": \"pending\",\n    \"created_at\": 1682424116000,\n    \"project\": \"documentation\"\n  },\n  {\n    \"id\": \"223e4567-e89b-12d3-a456-426614174001\",\n    \"description\": \"Schedule team meeting\",\n    \"priority\": \"medium\",\n    \"status\": \"pending\",\n    \"created_at\": 1682510516000,\n    \"project\": \"fastmcp\"\n  }\n],\n\"completed\": [\n  {\n    \"id\": \"323e4567-e89b-12d3-a456-426614174002\",\n    \"description\": \"Review pull request\",\n    \"priority\": \"high\",\n    \"status\": \"completed\",\n    \"created_at\": 1682424116000,\n    \"completed_at\": 1682434916000,\n    \"project\": \"hammerspoon\"\n  }\n],\n\"total_pending\": 2,\n\"total_completed\": 1,\n\"high_priority\": 1,\n\"medium_priority\": 1,\n\"low_priority\": 0,\n\"active_project_filter\": \"all\",\n\"last_updated\": \"2023-05-15T14:30:00Z\"\n}\n-->\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 410,
        "y": 1100,
        "wires": [
            [
                "98c0aca7ec2161cc"
            ]
        ]
    },
    {
        "id": "9a892952c84e8362",
        "type": "ui_template",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "group": "fed465747110fa96",
        "name": "ToDo Edit",
        "order": 1,
        "width": 18,
        "height": 29,
        "format": "<!-- Todo Item Editor Panel for FastMCP Todo Server Dashboard -->\n\n<script>\n    (function(scope) {\n    // Parse JSON payload if it's a string\n    scope.$watch('msg.payload', function(payload) {\n      if (payload && typeof payload === 'string') {\n        try {\n          scope.parsedPayload = JSON.parse(payload);\n        } catch(e) {\n          console.error('Error parsing payload JSON:', e);\n          scope.parsedPayload = {};\n        }\n      } else {\n        scope.parsedPayload = payload || {};\n      }\n\n      // Log the payload for debugging\n      console.log('Received payload:', scope.parsedPayload);\n\n      // Handle status messages from backend operations\n      if (scope.parsedPayload && scope.parsedPayload.status) {\n        handleStatusMessage(scope.parsedPayload);\n      }\n\n      // Initialize edit fields immediately when payload changes\n      if (scope.parsedPayload && scope.parsedPayload.id) {\n        initializeEditFields(scope.parsedPayload);\n      }\n    });\n\n    // Function to handle status messages from backend\n    function handleStatusMessage(payload) {\n      console.log('Handling status message:', payload);\n\n      if (payload.status === 'error' || payload.status === 'success' ||\n          payload.status === 'warning' || payload.status === 'info') {\n\n        scope.updateStatus = {\n          message: payload.message || 'Operation ' + (payload.status === 'success' ? 'completed' : payload.status),\n          type: payload.status\n        };\n\n        // Automatically clear status messages after a delay\n        setTimeout(function() {\n          scope.$apply(function() {\n            scope.updateStatus = null;\n          });\n        }, 5000);\n      }\n    }\n\n    // List of available projects for dropdown\n    scope.availableProjects = [\n      'balena_device_management',\n      'cogwyrm',\n      'docker_implementation',\n      'documentation',\n      'eventghost-rust',\n      'hammerghost',\n      'hammerspoon',\n      'madness_interactive',\n      'omnispindle',\n      'quality_assurance',\n      'regressiontestkit',\n      'spindlewrit',\n      'swarmonomicon'\n    ];\n\n    // Function to initialize edit fields with proper format handling\n    function initializeEditFields(todo) {\n      console.log('Initializing edit fields with:', todo);\n\n      // Store original data for comparison when saving\n      scope.originalTodo = JSON.parse(JSON.stringify(todo));\n\n      // Initialize edit fields with proper defaults\n      scope.editDescription = todo.description || '';\n      scope.editPriority = todo.priority ? todo.priority.toLowerCase() : 'initial';\n      scope.editStatus = todo.status ? todo.status.toLowerCase() : 'pending';\n      scope.editProject = todo.project || '';\n      scope.editDuration = todo.duration_minutes || 0;\n      scope.editNotes = todo.notes || '';\n      scope.editEnhancedDescription = todo.enhanced_description || '';\n      scope.editTicket = todo.ticket || '';\n\n      // Handle date format correctly for the date input\n      if (todo.due_date) {\n        // If due_date is already in YYYY-MM-DD format\n        if (typeof todo.due_date === 'string' && /^\\d{4}-\\d{2}-\\d{2}$/.test(todo.due_date)) {\n          scope.editDueDate = todo.due_date;\n        } else {\n          // Try to convert from timestamp or other format\n          try {\n            const date = new Date(todo.due_date);\n            if (!isNaN(date.getTime())) {\n              scope.editDueDate = date.toISOString().split('T')[0];\n            } else {\n              scope.editDueDate = '';\n            }\n          } catch(e) {\n            console.error('Error formatting date:', e);\n            scope.editDueDate = '';\n          }\n        }\n      } else {\n        scope.editDueDate = '';\n      }\n\n      console.log('Edit fields initialized:', {\n        desc: scope.editDescription,\n        priority: scope.editPriority,\n        status: scope.editStatus,\n        project: scope.editProject,\n        dueDate: scope.editDueDate,\n        duration: scope.editDuration,\n        notes: scope.editNotes\n      });\n    }\n\n    // Function to update a todo field\n    scope.updateTodoField = function(field, value) {\n      scope.send({\n        topic: \"todo/action/update\",\n        payload: {\n          id: scope.parsedPayload.id,\n          field: field,\n          value: value\n        }\n      });\n\n      // Show temporary feedback\n      scope.updateStatus = {\n        message: `Updating ${field}...`,\n        type: \"info\"\n      };\n    };\n\n    // Helper function to check if two values are different for update\n    function hasValueChanged(newVal, originalVal) {\n      // Handle undefined/null/empty string cases\n      if (newVal === undefined || newVal === null) newVal = '';\n      if (originalVal === undefined || originalVal === null) originalVal = '';\n\n      // Convert numbers to strings for comparison\n      if (typeof newVal === 'number') newVal = newVal.toString();\n      if (typeof originalVal === 'number') originalVal = originalVal.toString();\n\n      // Convert everything to strings and normalize case for comparison\n      return String(newVal).toLowerCase() !== String(originalVal).toLowerCase();\n    }\n\n    // Add a change handler to update form values and log changes\n    scope.handleFieldChange = function(field, value) {\n      console.log(`Field changed: ${field} = `, value);\n      \n      // Explicitly update the scope variable\n      switch(field) {\n        case 'description':\n          scope.editDescription = value;\n          break;\n        case 'priority':\n          scope.editPriority = value;\n          break;\n        case 'status':\n          scope.editStatus = value;\n          break;\n        case 'project':\n          scope.editProject = value;\n          break;\n        case 'due_date':\n          scope.editDueDate = value;\n          break;\n        case 'duration':\n          scope.editDuration = value;\n          break;\n        case 'notes':\n          scope.editNotes = value;\n          break;\n        case 'enhanced_description':\n          scope.editEnhancedDescription = value;\n          break;\n        case 'ticket':\n          scope.editTicket = value;\n          break;\n      }\n    };\n\n    // Function to save all changes at once\n    scope.saveAllChanges = function() {\n      // Make sure we have a valid todo ID\n      if (!scope.parsedPayload || !scope.parsedPayload.id) {\n        console.error('Cannot save changes: No todo ID found');\n        scope.updateStatus = {\n          message: \"Error: No todo ID found\",\n          type: \"error\"\n        };\n        return;\n      }\n\n      // Force Angular to update scope values from DOM before saving\n      try {\n        // Use timeout to ensure DOM changes are synced to scope\n        setTimeout(function() {\n          scope.$apply();\n        }, 0);\n      } catch (e) {\n        // Ignore apply errors\n      }\n\n      // Log all form field values for debugging\n      console.log('Form field values before save:', {\n        description: scope.editDescription,\n        priority: scope.editPriority,\n        status: scope.editStatus,\n        project: scope.editProject,\n        due_date: scope.editDueDate,\n        duration: scope.editDuration,\n        notes: scope.editNotes,\n        enhanced_description: scope.editEnhancedDescription,\n        ticket: scope.editTicket\n      });\n\n      const updates = {};\n\n      // Include all non-empty fields in the update (don't try to detect changes)\n      if (scope.editDescription !== undefined) {\n        updates.description = scope.editDescription;\n      }\n\n      if (scope.editPriority !== undefined) {\n        updates.priority = scope.editPriority;\n      }\n\n      if (scope.editDueDate !== undefined) {\n        updates.due_date = scope.editDueDate;\n      }\n\n      if (scope.editStatus !== undefined) {\n        updates.status = scope.editStatus;\n      }\n\n      if (scope.editProject !== undefined) {\n        updates.project = scope.editProject;\n      }\n\n      if (scope.editDuration !== undefined) {\n        updates.duration_minutes = parseInt(scope.editDuration) || 0;\n      }\n\n      if (scope.editNotes !== undefined) {\n        updates.notes = scope.editNotes;\n      }\n      \n      if (scope.editEnhancedDescription !== undefined) {\n        updates.enhanced_description = scope.editEnhancedDescription;\n      }\n      \n      if (scope.editTicket !== undefined) {\n        updates.ticket = scope.editTicket;\n      }\n\n      // Log the updates for debugging\n      console.log('Sending updates:', updates);\n\n      // Only send if there are actual fields to update\n      if (Object.keys(updates).length > 0) {\n        scope.send({\n          topic: \"todo/action/update_multiple\",\n          payload: {\n            id: scope.parsedPayload.id,\n            updates: updates\n          }\n        });\n\n        // Show feedback to user\n        scope.updateStatus = {\n          message: \"Saving changes...\",\n          type: \"info\"\n        };\n      } else {\n        console.log('No fields to update');\n        scope.updateStatus = {\n          message: \"No changes to save\",\n          type: \"warning\"\n        };\n\n        // Set a timeout to clear the message after a few seconds\n        setTimeout(function() {\n          scope.$apply(function() {\n            scope.updateStatus = null;\n          });\n        }, 3000);\n      }\n    };\n\n    // Initialize with no update status\n    scope.updateStatus = null;\n  })(scope);\n</script>\n\n<style>\n    .editor-container {\n        font-family: 'Roboto', sans-serif;\n        padding: 0 10px;\n        background-color: #f9f9fb;\n    }\n\n    .editor-header {\n        margin-bottom: 20px;\n        background-color: #1a237e;\n        color: white;\n        padding: 15px;\n        border-radius: 8px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.15);\n    }\n\n    .editor-title {\n        font-size: 22px;\n        font-weight: 600;\n        color: white;\n        margin-bottom: 5px;\n    }\n\n    .editor-form {\n        background-color: white;\n        border-radius: 8px;\n        padding: 16px;\n        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);\n        margin-bottom: 20px;\n        border-top: 4px solid #1a237e;\n    }\n\n    .form-group {\n        margin-bottom: 12px;\n    }\n\n    .form-label {\n        display: block;\n        font-weight: 500;\n        margin-bottom: 4px;\n        color: #333;\n    }\n    \n    .form-section-subtitle {\n        font-size: 13px;\n        color: #757575;\n        margin-top: -5px;\n        margin-bottom: 8px;\n    }\n\n    .form-control {\n        width: 100%;\n        padding: 8px 10px;\n        border: 1px solid #e0e0e0;\n        border-radius: 4px;\n        font-size: 14px;\n        transition: all 0.2s;\n        background-color: #fcfcfc;\n    }\n\n    .form-control:focus {\n        border-color: #2196f3;\n        outline: none;\n        box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);\n    }\n    \n    .enhanced-description {\n        font-family: 'Consolas', 'Monaco', monospace;\n        font-size: 13px;\n        line-height: 1.5;\n        background-color: #f5f7fa;\n    }\n\n    .form-row {\n        display: flex;\n        gap: 12px;\n        margin-bottom: 12px;\n    }\n\n    .form-col {\n        flex: 1;\n    }\n\n    .btn {\n        padding: 10px 16px;\n        border-radius: 4px;\n        font-size: 14px;\n        font-weight: 500;\n        cursor: pointer;\n        transition: all 0.2s;\n        border: none;\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .btn:hover {\n        transform: translateY(-1px);\n        box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n    }\n\n    .btn:active {\n        transform: translateY(1px);\n        box-shadow: 0 1px 2px rgba(0,0,0,0.1);\n    }\n\n    .btn-icon {\n        margin-right: 8px;\n    }\n\n    .btn-primary {\n        background-color: #2196f3;\n        color: white;\n    }\n\n    .btn-primary:hover {\n        background-color: #1976d2;\n    }\n\n    .btn-danger {\n        background-color: #f44336;\n        color: white;\n    }\n\n    .btn-danger:hover {\n        background-color: #d32f2f;\n    }\n\n    .btn-success {\n        background-color: #4caf50;\n        color: white;\n    }\n\n    .btn-success:hover {\n        background-color: #388e3c;\n    }\n\n    .btn-purple {\n        background-color: #9c27b0;\n        color: white;\n    }\n\n    .btn-purple:hover {\n        background-color: #8e24aa;\n    }\n\n    .action-buttons {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 10px;\n        margin-top: 20px;\n    }\n\n    .todo-id-badge {\n        font-family: monospace;\n        font-size: 12px;\n        color: #424242;\n        background-color: #f0f0f0;\n        padding: 6px 10px;\n        border-radius: 4px;\n        margin-bottom: 20px;\n        display: inline-block;\n        border-left: 3px solid #1a237e;\n    }\n\n    .form-section {\n        margin-bottom: 18px;\n        border-bottom: 1px solid #e0e0e0;\n        padding-bottom: 12px;\n    }\n\n    .form-section-title {\n        font-size: 16px;\n        font-weight: 600;\n        color: #1a237e;\n        margin-bottom: 12px;\n        padding-bottom: 6px;\n        border-bottom: 2px solid #e3f2fd;\n    }\n\n    .status-indicator {\n        display: inline-block;\n        width: 12px;\n        height: 12px;\n        border-radius: 50%;\n        margin-right: 8px;\n    }\n\n    .status-pending {\n        background-color: #ff9800;\n    }\n\n    .status-completed {\n        background-color: #4caf50;\n    }\n    \n    .status-review {\n        background-color: #9c27b0;\n    }\n\n    .status-badge {\n        padding: 4px 10px;\n        border-radius: 12px;\n        font-size: 12px;\n        font-weight: 500;\n        margin-left: 10px;\n        text-transform: uppercase;\n    }\n\n    .status-pending-badge {\n        background-color: #fff3e0;\n        color: #e65100;\n    }\n\n    .status-completed-badge {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n    \n    .status-review-badge {\n        background-color: #f3e5f5;\n        color: #6a1b9a;\n    }\n\n    /* Priority color indicators */\n    .priority-high {\n        border-left: 4px solid #f44336;\n    }\n    \n    .priority-medium {\n        border-left: 4px solid #ff9800;\n    }\n    \n    .priority-low {\n        border-left: 4px solid #4caf50;\n    }\n    \n    .priority-initial {\n        border-left: 4px solid #9e9e9e;\n    }\n\n    .empty-state {\n        padding: 40px;\n        text-align: center;\n        background-color: #f5f5f5;\n        border-radius: 8px;\n        color: #757575;\n        box-shadow: inset 0 0 5px rgba(0,0,0,0.05);\n        border: 1px dashed #ccc;\n    }\n\n    .todo-lookup {\n        display: flex;\n        gap: 10px;\n        margin-bottom: 20px;\n        background-color: white;\n        padding: 15px;\n        border-radius: 8px;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n    }\n\n    .todo-lookup input {\n        flex: 1;\n    }\n\n    .update-status {\n        margin-top: 10px;\n        padding: 10px 15px;\n        border-radius: 4px;\n        font-size: 14px;\n        box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        animation: fadeIn 0.3s ease-in;\n    }\n\n    @keyframes fadeIn {\n        from { opacity: 0; transform: translateY(-10px); }\n        to { opacity: 1; transform: translateY(0); }\n    }\n\n    .update-status.info {\n        background-color: #e3f2fd;\n        color: #1565c0;\n        border-left: 4px solid #1565c0;\n    }\n\n    .update-status.success {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n        border-left: 4px solid #2e7d32;\n    }\n\n    .update-status.warning {\n        background-color: #fff3e0;\n        color: #e65100;\n        border-left: 4px solid #e65100;\n    }\n\n    .update-status.error {\n        background-color: #ffebee;\n        color: #c62828;\n        border-left: 4px solid #c62828;\n    }\n\n    /* Debug info */\n    .debug-info {\n        margin-top: 20px;\n        padding: 10px;\n        background-color: #f8f9fa;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        font-family: monospace;\n        font-size: 12px;\n        white-space: pre-wrap;\n    }\n    \n    /* Custom select styling */\n    select.form-control {\n        appearance: none;\n        background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24'%3E%3Cpath fill='%23424242' d='M7 10l5 5 5-5z'/%3E%3C/svg%3E\");\n        background-repeat: no-repeat;\n        background-position: right 10px center;\n        padding-right: 30px;\n    }\n</style>\n\n<div class=\"editor-container\">\n    <div class=\"editor-header\">\n        <h2 class=\"editor-title\">Todo Item Editor</h2>\n        <p>Edit todo details and save changes to the database</p>\n    </div>\n\n    <div class=\"todo-lookup\">\n        <input type=\"text\" class=\"form-control\" placeholder=\"Enter todo ID to edit\" ng-model=\"todoIdToLookup\" />\n        <button class=\"btn btn-primary\" ng-click=\"send({topic: 'todo/action/edit', payload: {id: todoIdToLookup}})\">\n            <i class=\"fa fa-search btn-icon\"></i> Load Todo\n        </button>\n    </div>\n\n    <div ng-if=\"parsedPayload && parsedPayload.id\" class=\"editor-form\" ng-class=\"{'priority-high': editPriority === 'high', 'priority-medium': editPriority === 'medium', 'priority-low': editPriority === 'low', 'priority-initial': editPriority === 'initial'}\">\n        <div class=\"todo-id-badge\">\n            ID: {{parsedPayload.id}}\n            <span ng-if=\"parsedPayload.status\" class=\"status-badge\" ng-class=\"{'status-pending-badge': parsedPayload.status.toLowerCase() === 'pending', 'status-completed-badge': parsedPayload.status.toLowerCase() === 'completed', 'status-review-badge': parsedPayload.status.toLowerCase() === 'review'}\">\n                {{parsedPayload.status}}\n            </span>\n        </div>\n\n        <div class=\"form-section\">\n            <h3 class=\"form-section-title\">Basic Information</h3>\n\n            <div class=\"form-group\">\n                <label class=\"form-label\">Description</label>\n                <input type=\"text\" class=\"form-control\" ng-model=\"editDescription\" ng-change=\"handleFieldChange('description', editDescription)\" />\n            </div>\n\n            <div class=\"form-row\">\n                <div class=\"form-col\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Priority</label>\n                        <select class=\"form-control\" ng-model=\"editPriority\" ng-change=\"handleFieldChange('priority', editPriority)\">\n                            <option value=\"high\">High</option>\n                            <option value=\"medium\">Medium</option>\n                            <option value=\"low\">Low</option>\n                            <option value=\"initial\">Initial</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div class=\"form-col\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Status</label>\n                        <select class=\"form-control\" ng-model=\"editStatus\" ng-change=\"handleFieldChange('status', editStatus)\">\n                            <option value=\"pending\">Pending</option>\n                            <option value=\"completed\">Completed</option>\n                            <option value=\"review\">Review</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"form-label\">Project</label>\n                <select class=\"form-control\" ng-model=\"editProject\" ng-change=\"handleFieldChange('project', editProject)\">\n                    <option value=\"\">-- Select Project --</option>\n                    <option ng-repeat=\"project in availableProjects\" value=\"{{project}}\">{{project}}</option>\n                </select>\n            </div>\n        </div>\n\n        <div class=\"form-section\">\n            <h3 class=\"form-section-title\">Additional Details</h3>\n\n            <div class=\"form-row\">\n                <div class=\"form-col\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Due Date</label>\n                        <input type=\"date\" class=\"form-control\" ng-model=\"editDueDate\" ng-change=\"handleFieldChange('due_date', editDueDate)\" />\n                    </div>\n                </div>\n\n                <div class=\"form-col\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Duration (minutes)</label>\n                        <input type=\"number\" class=\"form-control\" ng-model=\"editDuration\" ng-change=\"handleFieldChange('duration', editDuration)\" min=\"0\" max=\"480\" />\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"form-label\">Ticket Reference</label>\n                <input type=\"text\" class=\"form-control\" ng-model=\"editTicket\" ng-change=\"handleFieldChange('ticket', editTicket)\" placeholder=\"Enter ticket ID or URL\" />\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"form-label\">Notes</label>\n                <textarea class=\"form-control\" rows=\"4\" ng-model=\"editNotes\" ng-change=\"handleFieldChange('notes', editNotes)\"></textarea>\n            </div>\n        </div>\n\n        <div class=\"form-section\">\n            <h3 class=\"form-section-title\">Enhanced Description</h3>\n            <p class=\"form-section-subtitle\">Use markdown formatting for rich text</p>\n            <div class=\"form-group\">\n                <textarea class=\"form-control enhanced-description\" rows=\"8\" ng-model=\"editEnhancedDescription\" ng-change=\"handleFieldChange('enhanced_description', editEnhancedDescription)\" placeholder=\"Add detailed description with markdown formatting...\"></textarea>\n            </div>\n        </div>\n\n        <div class=\"form-section\" ng-if=\"parsedPayload.created_at || parsedPayload.completed_at\">\n            <h3 class=\"form-section-title\">Timestamps</h3>\n\n            <div class=\"form-row\">\n                <div class=\"form-col\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Created At</label>\n                        <div class=\"timestamp-value\">{{parsedPayload.created_at | date:'MMM d, yyyy h:mm a'}}</div>\n                    </div>\n                </div>\n\n                <div class=\"form-col\" ng-if=\"parsedPayload.completed_at\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Completed At</label>\n                        <div class=\"timestamp-value\">{{parsedPayload.completed_at | date:'MMM d, yyyy h:mm a'}}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"action-buttons\">\n            <button class=\"btn btn-primary\" ng-click=\"saveAllChanges()\">\n                <i class=\"fa fa-save btn-icon\"></i> Save Changes\n            </button>\n\n            <button class=\"btn btn-success\" ng-click=\"updateTodoField('status', 'completed')\" ng-if=\"editStatus !== 'completed'\">\n                <i class=\"fa fa-check-circle btn-icon\"></i> Mark Completed\n            </button>\n            \n            <button class=\"btn btn-purple\" ng-click=\"updateTodoField('status', 'review')\" ng-if=\"editStatus !== 'review'\">\n                <i class=\"fa fa-eye btn-icon\"></i> Mark for Review\n            </button>\n\n            <button class=\"btn btn-danger\" ng-click=\"send({topic: 'todo/action/delete', payload: {id: parsedPayload.id}})\">\n                <i class=\"fa fa-trash btn-icon\"></i> Delete Todo\n            </button>\n        </div>\n\n        <div ng-if=\"updateStatus\" class=\"update-status {{updateStatus.type}}\">\n            {{updateStatus.message}}\n        </div>\n    </div>\n\n    <div ng-if=\"!parsedPayload || !parsedPayload.id\" class=\"empty-state\">\n        <i class=\"fa fa-edit\" style=\"font-size: 48px; margin-bottom: 16px; color: #1a237e;\"></i>\n        <h3>No Todo Selected</h3>\n        <p>Enter a todo ID above to load and edit a todo item</p>\n    </div>\n\n    <!-- Debug section to help troubleshoot data flow (uncomment when needed) -->\n    <!-- \n    <div class=\"debug-info\">\n        <div>Topic: {{msg.topic}}</div>\n        <div>Raw Payload: {{JSON.stringify(msg.payload)}}</div>\n        <div>Current Todo ID: {{parsedPayload.id || 'None'}}</div>\n        <div ng-if=\"originalTodo\">Original Todo: {{JSON.stringify(originalTodo)}}</div>\n        <div ng-if=\"updateStatus\">Status: {{updateStatus.type}} - {{updateStatus.message}}</div>\n    </div>\n    -->\n</div>\n\n<!--\nNode-RED Message Format (example response):\n{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"description\": \"Prepare weekly report\",\n  \"priority\": \"high\",\n  \"status\": \"pending\",\n  \"created_at\": 1682424116000,\n  \"due_date\": \"2023-05-20\",\n  \"duration_minutes\": 60,\n  \"notes\": \"Include last week's metrics and forecasts\"\n}\n-->\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 410,
        "y": 1140,
        "wires": [
            [
                "aa3c19870a047f03"
            ]
        ]
    },
    {
        "id": "98c0aca7ec2161cc",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "ListActions",
        "func": "const action = msg.payload.action;\nconst todoId = msg.payload.id;\n\nlet topic = '';\nlet newMsg = { payload: {} };\n\n// Handle direct topic if already set (from copyToClipboard function)\nif (msg.topic === 'todo/action/edit') {\n    // Pass through the message but add a special flag to prevent refresh\n    msg.noRefresh = true;\n    msg.directEdit = true;\n    return msg;\n}\n\nswitch(action) {\n    case 'complete':\n        topic = 'todo/action/complete';\n        newMsg.payload = { id: todoId };\n        break;\n    case 'suggestions':\n        topic = 'todo/action/get_todo_for_insights';\n        newMsg.payload = { id: todoId };\n        break;\n    case 'schedule':\n        topic = 'todo/action/schedule';\n        newMsg.payload = { id: todoId };\n        break;\n    case 'copy_id':\n        return msg;\n    default:\n        return null;\n}\n\nnewMsg.topic = topic;\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1100,
        "wires": [
            [
                "331cb971cae4185d"
            ]
        ]
    },
    {
        "id": "31514c435b15540f",
        "type": "link in",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "editor-only-link",
        "links": [
            "f1357f1ec38dd4c9"
        ],
        "x": 245,
        "y": 1180,
        "wires": [
            [
                "9a892952c84e8362"
            ]
        ]
    },
    {
        "id": "aa3c19870a047f03",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "EditActions",
        "func": "// Function to handle actions from the Todo Item Editor\n// This enables routing events from the editor to the correct MongoDB operations\n\n// Extract action type and todo ID from the incoming message\nconst topic = msg.topic || '';\nconst payload = msg.payload || {};\n\n// If this isn't an editor action, pass through\nif (!topic.startsWith('todo/action/'))\n{\n    return msg;\n}\n\n// Extract the specific action from the topic\nconst action = topic.replace('todo/action/', '');\nconst todoId = payload.id;\n\n// Add debug info\nnode.warn(`EditActions received ${action} action with payload: ${JSON.stringify(payload)}`);\n\n// Validate todo ID for most actions\nif (!todoId && action !== 'refresh_todos' && action !== 'refresh_suggestions' && action !== 'daily_schedule' && action !== 'copy_id')\n{\n    node.warn(`Error: No todo ID provided for ${action} action`);\n    return {\n        payload: {\n            status: \"error\",\n            message: \"No todo ID provided for \" + action + \" action\"\n        },\n        topic: \"todo/dashboard/editor\"\n    };\n}\n\n// Route the message based on the action\nswitch (action)\n{\n    case 'update':\n        // Single field update\n        if (!payload.field || payload.value === undefined)\n        {\n            node.warn(`Error: Field name or value missing for update action`);\n            return {\n                payload: {\n                    status: \"error\",\n                    message: \"Field name or value missing for update\"\n                },\n                topic: \"todo/dashboard/editor\"\n            };\n        }\n\n        node.warn(`Routing update for field: ${payload.field}, value: ${payload.value}`);\n        // Pass through with topic preserved\n        return msg;\n\n    case 'update_multiple':\n        // Multiple field update\n        if (!payload.updates || Object.keys(payload.updates).length === 0)\n        {\n            node.warn(`Error: No updates provided for update_multiple action`);\n            return {\n                payload: {\n                    status: \"error\",\n                    message: \"No updates provided for update_multiple\"\n                },\n                topic: \"todo/dashboard/editor\"\n            };\n        }\n\n        // Log the updates for debugging\n        node.warn(\"Processing update_multiple with updates: \" + JSON.stringify(payload.updates));\n\n        // Clean any empty updates\n        const updates = payload.updates;\n        let hasRealUpdates = false;\n\n        // Check if any of the updates contain non-empty values\n        Object.keys(updates).forEach(key =>\n        {\n            const value = updates[key];\n            if (value !== null && value !== undefined && value !== '')\n            {\n                hasRealUpdates = true;\n            }\n        });\n\n        // If all updates are empty strings or null/undefined, warn and pass through\n        if (!hasRealUpdates)\n        {\n            node.warn(\"Warning: All update values are empty, but proceeding anyway\");\n        }\n\n        // Pass through with topic preserved\n        return msg;\n\n    case 'delete':\n        // Todo deletion\n        node.warn(`Routing delete action for todo ID: ${todoId}`);\n        // Pass through with topic preserved\n        return msg;\n\n    case 'edit':\n        // Load todo for editing\n        node.warn(`Routing edit action for todo ID: ${todoId}`);\n        // Pass through with topic preserved\n        return msg;\n\n    case 'complete':\n        // Mark todo as complete\n        node.warn(`Routing complete action for todo ID: ${todoId}`);\n        // Pass through with topic preserved\n        return msg;\n\n    case 'copy_id':\n        // Copy todo ID to clipboard\n        node.warn(`Routing copy_id action for todo ID: ${todoId}`);\n        // Pass through with topic preserved\n        return msg;\n\n    default:\n        // Unknown action\n        node.warn(`Error: Unknown editor action: ${action}`);\n        return {\n            payload: {\n                status: \"error\",\n                message: \"Unknown editor action: \" + action\n            },\n            topic: \"todo/dashboard/editor\"\n        };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1140,
        "wires": [
            [
                "3b8a43150f8ef5db"
            ]
        ]
    },
    {
        "id": "331cb971cae4185d",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "action-pub",
        "mode": "link",
        "links": [
            "b9cdbb33dfe0a2cd",
            "af45aadd044350e0"
        ],
        "x": 675,
        "y": 1100,
        "wires": []
    },
    {
        "id": "3b8a43150f8ef5db",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "action-pub",
        "mode": "link",
        "links": [
            "b9cdbb33dfe0a2cd",
            "af45aadd044350e0"
        ],
        "x": 675,
        "y": 1140,
        "wires": []
    },
    {
        "id": "g-todos",
        "type": "ui_group",
        "name": "Todo List",
        "tab": "t-dashboard",
        "order": 1,
        "disp": true,
        "width": 16,
        "collapse": false
    },
    {
        "id": "fed465747110fa96",
        "type": "ui_group",
        "name": "Item Editor",
        "tab": "t-dashboard",
        "order": 2,
        "disp": true,
        "width": 18,
        "collapse": false
    },
    {
        "id": "t-dashboard",
        "type": "ui_tab",
        "name": "Omnispindle",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
