[
    {
        "id": "e890cb64b583ae67",
        "type": "tab",
        "label": "todo-dash",
        "disabled": false,
        "info": "Dashboard with MongoDB4 connection for FastMCP Todo Server"
    },
    {
        "id": "814deb560dd80e77",
        "type": "group",
        "z": "e890cb64b583ae67",
        "name": "Debug Nodes",
        "style": {
            "stroke": "#ffbfbf",
            "label": true,
            "color": "#ff3f3f",
            "fill": "#bfbfbf",
            "label-position": "n"
        },
        "nodes": [
            "553108cf28ce7b24",
            "9348ae0a3e0c29ad",
            "af45aadd044350e0",
            "189055f582621d7c",
            "064dba3c02da8301",
            "e0748fc86717ef67"
        ],
        "x": 1444,
        "y": 39,
        "w": 332,
        "h": 262
    },
    {
        "id": "e4a65e9fb61229b9",
        "type": "group",
        "z": "e890cb64b583ae67",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7512a5cbac0343f5",
            "b446d06b5fa4c934",
            "377e0c4d336d3db2",
            "a422bca90941ac16",
            "7d77c5b75217dbf4",
            "3efd1f5dff848d65",
            "f9f9f713613236e2",
            "f6a49fba95a4ba5f",
            "3391269a0dd9f559",
            "c57d98e84ba3bf45"
        ],
        "x": 644,
        "y": 779,
        "w": 1242,
        "h": 122
    },
    {
        "id": "7f3d19dc6b21c563",
        "type": "group",
        "z": "e890cb64b583ae67",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8d670b8299f89a5b",
            "efbe7226e450cc80",
            "75fd102f9bbc89f7",
            "9a892952c84e8362",
            "98c0aca7ec2161cc",
            "31514c435b15540f",
            "aa3c19870a047f03",
            "331cb971cae4185d",
            "3b8a43150f8ef5db"
        ],
        "x": 254,
        "y": 1019,
        "w": 672,
        "h": 162
    },
    {
        "id": "cbb2d887d9760353",
        "type": "group",
        "z": "e890cb64b583ae67",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f9b8db04cfa9cf3f",
            "10141c5db597a2d1",
            "4ba8ed04634ace50",
            "1e85292a839d5575",
            "f1357f1ec38dd4c9",
            "6822c3f04ab49643"
        ],
        "x": 434,
        "y": 399,
        "w": 772,
        "h": 122
    },
    {
        "id": "f994973ef4b87c96",
        "type": "group",
        "z": "e890cb64b583ae67",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "db5ccc8ce80d9597",
            "7aede22112869fce",
            "9fa5827908a49dc4",
            "ca3c7ebfe1f7faeb",
            "d40b17f733d1ab71",
            "a78b509a82385b19"
        ],
        "x": 268,
        "y": 33,
        "w": 1024,
        "h": 354
    },
    {
        "id": "3ab338a0bdb8a589",
        "type": "group",
        "z": "e890cb64b583ae67",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a25dd6b2b2f5f12e",
            "085eea8b2f17b387",
            "e09056ce2617f976",
            "45215345cf0430c0",
            "2a8e336bc770947e",
            "5986f20dd192f3d1",
            "0cccd80571ac3f9e",
            "154f2ad042c04c47",
            "7c064436f034e61c"
        ],
        "x": 594,
        "y": 539,
        "w": 712,
        "h": 202
    },
    {
        "id": "6b213e2487e72b2d",
        "type": "group",
        "z": "e890cb64b583ae67",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "22ac9e90c38881a6",
            "8e4883248d3f6123",
            "fc1ec21245012ff3",
            "7a7df2902036d9b6",
            "3c68bf135c197c23"
        ],
        "x": 214,
        "y": 659,
        "w": 372,
        "h": 202
    },
    {
        "id": "794ccfcc603b4175",
        "type": "group",
        "z": "e890cb64b583ae67",
        "name": "Todo HTTP API",
        "style": {
            "stroke": "#3498db",
            "fill": "#ecf0f1",
            "label": true,
            "color": "#0c59cf"
        },
        "nodes": [
            "1fe49cdff51929f8",
            "1519217d0439bde3",
            "c9dbd8229cab6689",
            "9cccbd48e8fa8e77",
            "3c7fdc8f0af1dcf2",
            "f52ad2a536fccf6b",
            "5e0116f6d8d8002b"
        ],
        "x": 1154,
        "y": 1319,
        "w": 1052,
        "h": 162
    },
    {
        "id": "bf8d124af1bd5874",
        "type": "group",
        "z": "e890cb64b583ae67",
        "name": "Dashboard HTTP Controls",
        "style": {
            "stroke": "#e74c3c",
            "fill": "#f7f3e9",
            "label": true,
            "color": "#e74c3c"
        },
        "nodes": [
            "991ed2db9a6f7277",
            "ff670acf633ea8e5",
            "24f4c6037e257e6f",
            "4caa598c867dcbd7",
            "8fb4d9d93948e07c",
            "3cad658afb5da2b7",
            "4b28253c090e66bd",
            "fab1fa0c60a9a9b2",
            "5eea9c0d47d50a15",
            "15023bdcd355fbf3",
            "77420d7e7aceb49f"
        ],
        "x": 994,
        "y": 1039,
        "w": 992,
        "h": 242
    },
    {
        "id": "b00e1184cd8b1e60",
        "type": "group",
        "z": "e890cb64b583ae67",
        "name": "Log Ingestion",
        "style": {
            "stroke": "#999999",
            "fill": "#f2f2f2",
            "label": true,
            "color": "#555555"
        },
        "nodes": [
            "3cbf884ecef064d0",
            "84a9ef1963f32caa",
            "38af39d874d40466"
        ],
        "x": 64,
        "y": 1293.999994277954,
        "w": 482,
        "h": 142
    },
    {
        "id": "d8ac93aea5cc3164",
        "type": "group",
        "z": "e890cb64b583ae67",
        "name": "UI Components",
        "style": {
            "stroke": "#999999",
            "fill": "#f8f7f2",
            "label": true,
            "color": "#555555"
        },
        "nodes": [
            "61895d493b9f923c",
            "4d2411ea8b25c6e2",
            "5667be82e2f38333"
        ],
        "x": 594.0000152587891,
        "y": 1347.0000247955322,
        "w": 472,
        "h": 142
    },
    {
        "id": "2ff18052d788c794",
        "type": "group",
        "z": "e890cb64b583ae67",
        "name": "API Integration",
        "style": {
            "stroke": "#999999",
            "fill": "#f2f7f8",
            "label": true,
            "color": "#555555"
        },
        "nodes": [
            "7924b3da6c8fcf17",
            "e880dcb008ea23b1"
        ],
        "x": 574,
        "y": 1539,
        "w": 692,
        "h": 82
    },
    {
        "id": "a78b509a82385b19",
        "type": "group",
        "z": "e890cb64b583ae67",
        "g": "f994973ef4b87c96",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "95fea1538f57d7e5",
            "5af0f9a96534bde4",
            "2303290e972f86e5"
        ],
        "x": 294,
        "y": 59,
        "w": 252,
        "h": 82
    },
    {
        "id": "9fa5827908a49dc4",
        "type": "group",
        "z": "e890cb64b583ae67",
        "g": "f994973ef4b87c96",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b81b9f110be9558d",
            "2e76a2925ecf7980",
            "8d64470b81c86657",
            "67f56759fa751ebf"
        ],
        "x": 594,
        "y": 79,
        "w": 612,
        "h": 82
    },
    {
        "id": "7aede22112869fce",
        "type": "group",
        "z": "e890cb64b583ae67",
        "g": "f994973ef4b87c96",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "15bb9cf1e224aac9",
            "a6db9f1e0da9ef65",
            "fea965811933e941",
            "8785d4f6e298e040"
        ],
        "x": 594,
        "y": 179,
        "w": 642,
        "h": 82
    },
    {
        "id": "db5ccc8ce80d9597",
        "type": "group",
        "z": "e890cb64b583ae67",
        "g": "f994973ef4b87c96",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7d6325552ec7ed0a",
            "8e156b49b599ed29",
            "c9be399814791e95",
            "c714b17a4d69317e"
        ],
        "x": 594,
        "y": 279,
        "w": 672,
        "h": 82
    },
    {
        "id": "fa491c95f3f4ac79",
        "type": "group",
        "z": "e890cb64b583ae67",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d1e3061449f916c5",
            "9e852016adc42f2c",
            "63b6d78efd2d69ed",
            "32cd8d01e43332f3",
            "e5802fb8bb1f5382",
            "334f7f100e16ca49",
            "7536a291bec6ea6b",
            "8a9417e81c6e8a97",
            "9ea558fe7c273114",
            "2bc85dd65afdc4eb",
            "2fd455fef50050a9",
            "91c9dd4bf96e77d7",
            "af49098fc8fec1b0",
            "21670d9ec4b93356"
        ],
        "x": 1374,
        "y": 379,
        "w": 862,
        "h": 282
    },
    {
        "id": "7d6325552ec7ed0a",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "db5ccc8ce80d9597",
        "name": "set-aggregate",
        "func": "// This function prepares the MongoDB aggregation pipeline parameters\n// based on the request type and filters passed in the msg payload\n\n// Get the payload and debug\nconst payload = msg.payload || {};\nnode.warn(\"Preparing aggregate parameters with payload: \" + JSON.stringify(payload));\n\n// Default parameters\nlet match = { status: { $ne: \"completed\" } }; // Default to show pending todos\nlet sort = { priority: 1, created_at: -1 }; // Default sort by priority then date\n\n// Get project filter from global context, if it exists\nconst projectFilter = global.get(\"projectFilter\") || \"all\";\nif (projectFilter !== \"all\")\n{\n    match.project = projectFilter;\n    node.warn(\"Filtering by project: \" + projectFilter);\n}\n\n// Check if a date is specified in the payload\nif (payload.date && payload.date !== 'all')\n{\n    // Parse the date string to Date object\n    const date = new Date(payload.date);\n    const dateStr = date.toISOString().split('T')[0]; // YYYY-MM-DD format\n\n    // Create a range for the entire day\n    const startDate = new Date(dateStr + \"T00:00:00.000Z\");\n    const endDate = new Date(dateStr + \"T23:59:59.999Z\");\n\n    // Add date filter to match stage\n    match.due_date = {\n        $gte: Math.floor(startDate.getTime() / 1000),\n        $lte: Math.floor(endDate.getTime() / 1000)\n    };\n\n    node.warn(\"Filtering by date: \" + dateStr);\n}\n\n// Prepare the aggregation pipeline\nconst pipeline = [\n    // Match stage to filter todos\n    { $match: match },\n\n    // Sort todos by priority and creation date\n    { $sort: sort },\n\n    // Limit to most important 8 todos per day\n    { $limit: 200 },\n\n    // Project to add scheduling metadata\n    {\n        $project: {\n            _id: 0,\n            id: \"$id\",\n            todo_id: \"$id\",\n            description: 1,\n            priority: 1,\n            status: 1,\n            created_at: 1,\n            // Estimate duration based on priority\n            duration_minutes: {\n                $switch: {\n                    branches: [\n                        { case: { $eq: [\"$priority\", \"high\"] }, then: 60 },\n                        { case: { $eq: [\"$priority\", \"medium\"] }, then: 45 },\n                        { case: { $eq: [\"$priority\", \"initial\"] }, then: 45 }\n                    ],\n                    default: 30  // low priority gets 30 minutes\n                }\n            },\n            project: 1,\n            due_date: 1,\n            notes: 1\n        }\n    }\n];\n\n// Set the query parameters for MongoDB\n// IMPORTANT: For MongoDB4 node, payload must be an array containing the pipeline\nmsg.payload = [pipeline];\nmsg.collection = \"todos\";\nmsg.operation = \"aggregate\";\n\nnode.warn(\"Aggregate pipeline prepared with \" + pipeline.length + \" stages\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 320,
        "wires": [
            [
                "8e156b49b599ed29"
            ]
        ],
        "inputLabels": [
            "Trigger dashboard update"
        ],
        "outputLabels": [
            "Get Pending Todos"
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "9975dfe614057438",
        "type": "switch",
        "z": "e890cb64b583ae67",
        "name": "Route by Action",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "todo/action/get_todo_for_insights",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/copy_id",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/filter_project",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/suggestions",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/refresh_todos",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/edit",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/complete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/update_multiple",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/delete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/filter_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/filter_priority",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/filter_date",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/clear_filters",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/create",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 15,
        "x": 155,
        "y": 520,
        "wires": [
            [
                "c843d2925e0307cb"
            ],
            [
                "85916c4103facd4f"
            ],
            [
                "d40b17f733d1ab71"
            ],
            [
                "b81b9f110be9558d"
            ],
            [
                "7d6325552ec7ed0a",
                "8785d4f6e298e040"
            ],
            [
                "f9b8db04cfa9cf3f"
            ],
            [
                "085eea8b2f17b387"
            ],
            [
                "e09056ce2617f976"
            ],
            [
                "45215345cf0430c0"
            ],
            [
                "2a8e336bc770947e"
            ],
            [
                "22ac9e90c38881a6"
            ],
            [
                "7a7df2902036d9b6"
            ],
            [
                "fc1ec21245012ff3"
            ],
            [
                "8e4883248d3f6123"
            ],
            [
                "193dacde143c7c0b"
            ]
        ],
        "inputLabels": [
            "Action-Sub"
        ],
        "outputLabels": [
            "get_todo_for_insights",
            "copy_id",
            "filter_project",
            "suggestions",
            "refresh_todos",
            "edit",
            "complete",
            "update",
            "update_multiple",
            "delete",
            "filter_status",
            "filter_priority",
            "filter_date",
            "clear_filters",
            "create"
        ],
        "icon": "font-awesome/fa-braille",
        "l": false
    },
    {
        "id": "95fea1538f57d7e5",
        "type": "inject",
        "z": "e890cb64b583ae67",
        "g": "a78b509a82385b19",
        "name": "refresh",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 400,
        "y": 100,
        "wires": [
            [
                "5af0f9a96534bde4"
            ]
        ]
    },
    {
        "id": "a25dd6b2b2f5f12e",
        "type": "mongodb4",
        "z": "e890cb64b583ae67",
        "g": "3ab338a0bdb8a589",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "deleteOne",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "DB-DeleteTodo",
        "x": 880,
        "y": 700,
        "wires": [
            [
                "154f2ad042c04c47"
            ]
        ]
    },
    {
        "id": "5af0f9a96534bde4",
        "type": "change",
        "z": "e890cb64b583ae67",
        "g": "a78b509a82385b19",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 505,
        "y": 100,
        "wires": [
            [
                "7d6325552ec7ed0a",
                "8785d4f6e298e040"
            ]
        ],
        "l": false
    },
    {
        "id": "ca3c7ebfe1f7faeb",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "f994973ef4b87c96",
        "name": "Project-filter",
        "func": "// This function sets the project filter in global context\n// and initiates a refresh of the todo list and suggestions\n\n// Extract project from payload\nconst projectFilter = msg.payload.project || \"all\";\n\n// Store in global context for use by other nodes\nglobal.set(\"projectFilter\", projectFilter);\n\n// Log what we're doing\nnode.warn(\"Setting project filter to: \" + projectFilter);\n\n// Return two messages: one to refresh todos and one to refresh suggestions\nreturn [\n    {\n        topic: \"todo/action/refresh_suggestions\",\n        payload: 1\n    },\n    {\n        topic: \"todo/action/refresh_todos\",\n        payload: 1\n    },\n    {\n        topic: \"todo/action/refresh_todos\",\n        payload: 1\n    }\n]; \n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 220,
        "wires": [
            [
                "b81b9f110be9558d"
            ],
            [
                "8785d4f6e298e040"
            ],
            [
                "7d6325552ec7ed0a"
            ]
        ]
    },
    {
        "id": "8e156b49b599ed29",
        "type": "mongodb4",
        "z": "e890cb64b583ae67",
        "g": "db5ccc8ce80d9597",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "aggregate",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "DB-GetPending",
        "x": 880,
        "y": 320,
        "wires": [
            [
                "c9be399814791e95"
            ]
        ]
    },
    {
        "id": "15bb9cf1e224aac9",
        "type": "mongodb4",
        "z": "e890cb64b583ae67",
        "g": "7aede22112869fce",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "aggregate",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "DB-GetCompleted",
        "x": 890,
        "y": 220,
        "wires": [
            [
                "a6db9f1e0da9ef65"
            ]
        ]
    },
    {
        "id": "b9cdbb33dfe0a2cd",
        "type": "link in",
        "z": "e890cb64b583ae67",
        "name": "actions-sub",
        "links": [
            "3b8a43150f8ef5db",
            "331cb971cae4185d",
            "3c68bf135c197c23",
            "21670d9ec4b93356",
            "63b6d78efd2d69ed"
        ],
        "x": 95,
        "y": 520,
        "wires": [
            [
                "9975dfe614057438"
            ]
        ]
    },
    {
        "id": "085eea8b2f17b387",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "3ab338a0bdb8a589",
        "name": "mark-complete",
        "func": "// Get the todo ID from the payload\nconst todoId = msg.payload.id;\n\nif (!todoId)\n{\n    return { payload: { status: \"error\", message: \"No todo ID provided\" } };\n}\n\n// Format according to mongodb4 node documentation\n// msg.payload must be an array of arguments for the driver operation\n// For updateOne: first arg is query, second is update, third is options\n\n// Prepare arguments as documented format\nconst query = { id: todoId };\nconst update = {\n    $set: {\n        status: \"completed\",\n        completed_at: Math.floor(Date.now() / 1000)\n    }\n};\nconst options = { upsert: false };\n\n// Set operation parameters according to docs\nmsg.payload = [query, update, options];\nmsg.collection = \"todos\";\nmsg.operation = \"updateOne\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 580,
        "wires": [
            [
                "5986f20dd192f3d1"
            ]
        ]
    },
    {
        "id": "b81b9f110be9558d",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "9fa5827908a49dc4",
        "name": "get-suggestions",
        "func": "// Get the todo ID from the payload\nconst todoId = msg.payload.id;\n\nif (!todoId) {\n    return { payload: { status: \"error\", message: \"No todo ID provided\" } };\n}\n\n// Prepare MongoDB find query\nreturn {\n    payload: {\n        // Query for MongoDB4 node format\n        filter: { id: todoId }\n    },\n    collection: \"todos\"\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 120,
        "wires": [
            [
                "2e76a2925ecf7980"
            ]
        ]
    },
    {
        "id": "f9b8db04cfa9cf3f",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "cbb2d887d9760353",
        "name": "find-id-to-edit",
        "func": "// Get the todo ID from the payload\nconst todoId = msg.payload.id;\n\nif (!todoId)\n{\n    return { payload: { status: \"error\", message: \"No todo ID provided\" } };\n}\n\n// Keep track of whether this is a direct edit request (from Copy ID)\n// This flag will be used to prevent refreshing the todo list\nconst noRefresh = msg.noRefresh === true;\nconst directEdit = msg.directEdit === true;\n\n// Format according to mongodb4 node documentation\n// msg.payload must be an array of arguments for the driver operation\n// For findOne: first arg is query, second is options\n\n// Prepare arguments as documented format\nconst query = { id: todoId };\nconst options = {}; // No specific options needed for this operation\n\n// Set operation parameters according to docs\nmsg.payload = [query, options];\nmsg.collection = \"todos\";\nmsg.operation = \"findOne\";\nmsg.topic = \"todo/action/edit\"; // Keep the topic for routing\n\n// Preserve the flags for use in downstream nodes\nmsg.noRefresh = noRefresh;\nmsg.directEdit = directEdit;\n\n// Debug output\nnode.warn(\"Finding todo to edit with ID: \" + todoId + \", noRefresh: \" + noRefresh);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 460,
        "wires": [
            [
                "10141c5db597a2d1"
            ]
        ]
    },
    {
        "id": "e09056ce2617f976",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "3ab338a0bdb8a589",
        "name": "update-field",
        "func": "// Get the todo ID and field update from the payload\nconst todoId = msg.payload.id;\nconst field = msg.payload.field;\nconst value = msg.payload.value;\n\nif (!todoId)\n{\n    return { payload: { status: \"error\", message: \"No todo ID provided\" } };\n}\n\nif (!field)\n{\n    return { payload: { status: \"error\", message: \"No field specified for update\" } };\n}\n\n// Create update object with stringified ID to ensure it's treated as a string\nconst updateObj = {};\nupdateObj[field] = value;\nupdateObj.last_modified = Math.floor(Date.now() / 1000);\n\n// If marking as completed, add completed_at timestamp\nif (field === 'status' && value === 'completed')\n{\n    updateObj.completed_at = Math.floor(Date.now() / 1000);\n}\n\n// Format according to mongodb4 node documentation\n// msg.payload must be an array of arguments for the driver operation\n// For updateOne: first arg is query, second is update, third is options\n\n// Prepare arguments as documented format\nconst query = { id: String(todoId) };\nconst update = { $set: updateObj };\nconst options = { upsert: false };\n\n// Set operation parameters according to docs\nmsg.payload = [query, update, options];\nmsg.collection = \"todos\";\nmsg.operation = \"updateOne\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 620,
        "wires": [
            [
                "0cccd80571ac3f9e"
            ]
        ]
    },
    {
        "id": "45215345cf0430c0",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "3ab338a0bdb8a589",
        "name": "update-multi",
        "func": "// Function to handle multiple field updates for a todo item\n// This function receives a todo ID and an object with multiple field updates\n// and processes them in a single MongoDB update operation\n\n// Get the todo ID and updates from the payload\nconst todoId = msg.payload.id;\nconst updates = msg.payload.updates || {};\n\n// Log the received updates for debugging\nnode.warn(\"Processing update_multiple for todo: \" + todoId);\nnode.warn(\"Updates: \" + JSON.stringify(updates));\n\nif (!todoId) {\n    return {\n        payload: {\n            status: \"error\",\n            message: \"No todo ID provided\"\n        },\n        topic: \"todo/dashboard/editor\"\n    };\n}\n\nif (Object.keys(updates).length === 0) {\n    return {\n        payload: {\n            status: \"error\",\n            message: \"No updates provided\"\n        },\n        topic: \"todo/dashboard/editor\"\n    };\n}\n\n// Normalize field values before updating\nconst normalizedUpdates = {};\n\n// Process each field with appropriate data type and validation\nObject.keys(updates).forEach(key => {\n    let value = updates[key];\n\n    // Process each field based on its expected type\n    switch (key) {\n        case 'priority':\n            // Ensure consistent casing for priority\n            if (value) {\n                normalizedUpdates.priority = value.toLowerCase();\n            }\n            break;\n\n        case 'status':\n            // Ensure consistent casing for status\n            if (value) {\n                normalizedUpdates.status = value.toLowerCase();\n            }\n            break;\n\n        case 'duration_minutes':\n            // Ensure duration is a number\n            normalizedUpdates.duration_minutes = parseInt(value) || 0;\n            break;\n\n        case 'due_date':\n            // Ensure date is in proper format if not empty\n            if (value && value.trim() !== '') {\n                normalizedUpdates.due_date = value;\n            } else {\n                normalizedUpdates.due_date = '';\n            }\n            break;\n\n        case 'notes':\n            // Ensure notes field is a string\n            normalizedUpdates.notes = value || '';\n            break;\n\n        case 'enhanced_description':\n            // Ensure enhanced_description field is a string\n            normalizedUpdates.enhanced_description = value || '';\n            break;\n\n        case 'ticket':\n            // Ensure ticket field is a string and normalize format\n            if (value && value.trim() !== '') {\n                // Remove any extra whitespace and normalize\n                normalizedUpdates.ticket = value.trim();\n            } else {\n                normalizedUpdates.ticket = '';\n            }\n            break;\n\n        default:\n            // For other fields, just pass the value through\n            normalizedUpdates[key] = value;\n    }\n});\n\n// Add last_modified timestamp\nnormalizedUpdates.last_modified = Math.floor(Date.now() / 1000);\n\n// If marking as completed, add completed_at timestamp\nif (normalizedUpdates.status === 'completed') {\n    normalizedUpdates.completed_at = Math.floor(Date.now() / 1000);\n}\n\n// Log normalized updates\nnode.warn(\"Normalized updates: \" + JSON.stringify(normalizedUpdates));\nnode.warn(\"Original vs normalized case comparison:\");\nObject.keys(updates).forEach(key => {\n    if (typeof updates[key] === 'string' && normalizedUpdates[key] !== updates[key]) {\n        node.warn(`Field \"${key}\": \"${updates[key]}\" → \"${normalizedUpdates[key]}\"`);\n    }\n});\n\n// Format according to mongodb4 node documentation\n// msg.payload must be an array of arguments for the driver operation\n// For updateOne: first arg is query, second is update, third is options\n\n// Prepare arguments as documented format\nconst query = { id: String(todoId) };\nconst update = { $set: normalizedUpdates };\nconst options = { upsert: false };\n\n// Set operation parameters according to docs\nmsg.payload = [query, update, options];\nmsg.collection = \"todos\";\nmsg.operation = \"updateOne\";\n\n// Add response routing topic to ensure result goes back to editor\nmsg.topic = \"todo/action/update_multiple\";\n\n// Log the operation for debugging\nnode.warn(\"Sending MongoDB updateOne operation for todo ID: \" + todoId);\n\n// Return the message for further processing\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 660,
        "wires": [
            [
                "0cccd80571ac3f9e"
            ]
        ]
    },
    {
        "id": "2a8e336bc770947e",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "3ab338a0bdb8a589",
        "name": "delete-todo",
        "func": "// Get the todo ID from the payload\nconst todoId = msg.payload.id;\n\nif (!todoId)\n{\n    return { payload: { status: \"error\", message: \"No todo ID provided\" } };\n}\n\n// Check if the ID is a string and if it might be an ObjectId\nlet filterQuery = {};\nif (todoId.length === 24 && /^[0-9a-fA-F]{24}$/.test(todoId))\n{\n    // This might be an ObjectId - set up filter to try both id and _id\n    filterQuery = { $or: [{ id: todoId }, { _id: todoId }] };\n} else\n{\n    // Just use id as a string\n    filterQuery = { id: todoId };\n}\n\n// Format according to mongodb4 node documentation\n// msg.payload must be an array of arguments for the driver operation\n// For deleteOne: first arg is filter, second is options\n\n// Set operation parameters according to docs\nmsg.payload = [filterQuery, {}]; // Filter and empty options\nmsg.collection = \"todos\";\nmsg.operation = \"deleteOne\";\nmsg.topic = \"todo/action/delete\"; // Keep the topic for routing\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 700,
        "wires": [
            [
                "a25dd6b2b2f5f12e"
            ]
        ]
    },
    {
        "id": "c9be399814791e95",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "db5ccc8ce80d9597",
        "name": "format-for-dashboard",
        "func": "// Get all the todos\nconst todos = msg.payload || [];\n\n// Get active project filter from global context\nconst activeProjectFilter = global.get(\"projectFilter\") || \"all\";\n\n// Count priorities\nconst highPriority = todos.filter(todo => todo.priority === \"high\").length;\nconst mediumPriority = todos.filter(todo => todo.priority === \"medium\" || todo.priority === \"initial\").length;\nconst lowPriority = todos.filter(todo => todo.priority === \"low\").length;\n\n// Sort pending todos by priority and creation date\nconst priorityRank = { \"high\": 0, \"medium\": 1, \"low\": 2, \"initial\": 1 };\ntodos.sort((a, b) =>\n{\n    // First by priority\n    const priorityDiff = priorityRank[a.priority || \"medium\"] - priorityRank[b.priority || \"medium\"];\n    if (priorityDiff !== 0) return priorityDiff;\n\n    // Then by creation date (descending)\n    return (b.created_at || 0) - (a.created_at || 0);\n});\n\n// Store pending todos in global context for other nodes to use\nglobal.set(\"pendingTodos\", todos);\n\n// Get completed todos count (if available)\nconst completedTodos = global.get(\"completedTodos\") || [];\n\n// Format for dashboard\nconst dashboardData = {\n    todos: todos,\n    total_pending: todos.length,\n    total_completed: completedTodos.length,\n    high_priority: highPriority,\n    medium_priority: mediumPriority,\n    low_priority: lowPriority,\n    active_project_filter: activeProjectFilter,\n    last_updated: new Date().toISOString()\n};\n\n// Debug output\n// node.warn(\"Publishing todos to dashboard: \" + todos.length + \" todos\");\n// node.warn(\"Priorities - High: \" + highPriority + \", Medium: \" + mediumPriority + \", Low: \" + lowPriority);\n\n\nreturn {\n    payload: dashboardData,\n    topic: \"todo/dashboard/todos\"\n};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 320,
        "wires": [
            [
                "c714b17a4d69317e"
            ]
        ]
    },
    {
        "id": "a6db9f1e0da9ef65",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "7aede22112869fce",
        "name": "pattern-analysis",
        "func": "// Get completed todos from MongoDB\nconst completedTodos = msg.payload || [];\n\n// Store in global context for other nodes to use\nglobal.set(\"completedTodos\", completedTodos);\n\n// Sort completed todos by completion date (descending)\ncompletedTodos.sort((a, b) => (b.completed_at || 0) - (a.completed_at || 0));\n\n// Limit to most recent for dashboard\nconst recentCompleted = completedTodos.slice(0, 5);\n\n// Find patterns in similar tasks (simplified implementation)\nfunction findPatterns(todos) {\n    const patterns = [];\n    \n    // Group by words in description\n    const taskGroups = {};\n    \n    todos.forEach(todo => {\n        const words = todo.description.toLowerCase().split(/\\s+/).filter(w => w.length > 4);\n        \n        words.forEach(word => {\n            if (!taskGroups[word]) {\n                taskGroups[word] = [];\n            }\n            \n            // Only add if not already in the group\n            if (!taskGroups[word].find(t => t.id === todo.id)) {\n                taskGroups[word].push(todo);\n            }\n        });\n    });\n    \n    // Find patterns with at least 2 todos\n    Object.keys(taskGroups).forEach(word => {\n        if (taskGroups[word].length >= 2) {\n            patterns.push({\n                pattern_id: `pattern-${patterns.length + 1}`,\n                keyword: word,\n                similar_tasks: taskGroups[word].length,\n                template: `${word} task`,\n                automation_confidence: Math.round(60 + (taskGroups[word].length * 5)),\n                examples: taskGroups[word].slice(0, 3).map(t => t.description)\n            });\n        }\n    });\n    \n    return patterns.slice(0, 3); // Return top 3 patterns\n}\n\n// Generate simple recommendations\nfunction generateRecommendations(todos) {\n    const recommendations = [];\n    \n    // Find pending todos similar to completed todos\n    const pendingTodos = global.get(\"pendingTodos\") || [];\n    \n    // For demo, just recommend high priority for first few todos\n    pendingTodos.slice(0, 2).forEach(todo => {\n        if (todo.priority !== \"high\") {\n            recommendations.push({\n                todo_id: todo.id,\n                description: todo.description,\n                current_priority: todo.priority || \"medium\",\n                recommended_priority: \"high\",\n                confidence: Math.round(70 + Math.random() * 20)\n            });\n        }\n    });\n    \n    return recommendations;\n}\n\n// Format AI suggestions for dashboard\nconst aiSuggestions = {\n    automation_suggestions: findPatterns(completedTodos),\n    priority_recommendations: generateRecommendations(completedTodos),\n    pattern_analysis: {\n        total_patterns: completedTodos.length > 0 ? Math.min(3, Math.floor(completedTodos.length / 2)) : 0,\n        analyzed_todos: completedTodos.length\n    },\n    completed: recentCompleted\n};\n\n// Debug output\nnode.warn(\"Publishing AI suggestions with \" + aiSuggestions.automation_suggestions.length + \" automation suggestions\");\nnode.warn(\"Publishing \" + aiSuggestions.priority_recommendations.length + \" priority recommendations\");\nnode.warn(\"Including \" + recentCompleted.length + \" recently completed todos\");\n\nreturn { \n    payload: aiSuggestions,\n    topic: \"todo/dashboard/suggestions\"\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "fea965811933e941"
            ]
        ]
    },
    {
        "id": "5986f20dd192f3d1",
        "type": "mongodb4",
        "z": "e890cb64b583ae67",
        "g": "3ab338a0bdb8a589",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "DB-CompleteTodo",
        "x": 890,
        "y": 580,
        "wires": [
            [
                "154f2ad042c04c47"
            ]
        ]
    },
    {
        "id": "2e76a2925ecf7980",
        "type": "mongodb4",
        "z": "e890cb64b583ae67",
        "g": "9fa5827908a49dc4",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "find",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "DB-FindTodo2",
        "x": 880,
        "y": 120,
        "wires": [
            [
                "8d64470b81c86657"
            ]
        ]
    },
    {
        "id": "fea965811933e941",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "7aede22112869fce",
        "name": "dashboard-pub",
        "mode": "link",
        "links": [
            "8d670b8299f89a5b",
            "9348ae0a3e0c29ad"
        ],
        "x": 1195,
        "y": 220,
        "wires": []
    },
    {
        "id": "10141c5db597a2d1",
        "type": "mongodb4",
        "z": "e890cb64b583ae67",
        "g": "cbb2d887d9760353",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "find",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "DB-FindTodo",
        "x": 710,
        "y": 460,
        "wires": [
            [
                "4ba8ed04634ace50"
            ]
        ]
    },
    {
        "id": "0cccd80571ac3f9e",
        "type": "mongodb4",
        "z": "e890cb64b583ae67",
        "g": "3ab338a0bdb8a589",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "updateOne",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "DB-UpdateTodo",
        "x": 880,
        "y": 640,
        "wires": [
            [
                "154f2ad042c04c47"
            ]
        ]
    },
    {
        "id": "8d64470b81c86657",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "9fa5827908a49dc4",
        "name": "process-result",
        "func": "// Check if we found a todo\nif (!msg.payload || msg.payload.length === 0) {\n    return { payload: { status: \"error\", message: \"Todo not found\" } };\n}\n\n// Get the first todo from the results\nconst todo = msg.payload[0];\n\n// Check which action we're performing\nif (msg.topic === \"todo/action/suggestions\") {\n    // Create a specific suggestion response for this todo\n    const response = {\n        todo: {\n            id: todo.id,\n            description: todo.description,\n            current_priority: todo.priority || \"medium\",\n            status: todo.status\n        },\n        suggestions: {\n            suggested_priority: suggestPriority(todo),\n            estimated_completion_time: estimateCompletionTime(todo),\n            automation_confidence: Math.round(60 + Math.random() * 25)\n        }\n    };\n    \n    return {\n        payload: response,\n        topic: \"todo/dashboard/suggestions\"\n    };\n} else if (msg.topic.includes(\"schedule\")) {\n    // Get the date (either from the msg.date or default to tomorrow)\n    const targetDate = msg.date || (() => {\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        return tomorrow.toISOString().split('T')[0];\n    })();\n    \n    // Create a schedule specifically for this todo\n    const scheduleResponse = createScheduleForTodo(todo, targetDate);\n    \n    return {\n        payload: scheduleResponse,\n        topic: \"todo/dashboard/schedule\"\n    };\n}\n\n// Helper function to suggest priority\nfunction suggestPriority(todo) {\n    // Simple logic - but in real app would be more sophisticated\n    const description = todo.description.toLowerCase();\n    \n    if (description.includes(\"urgent\") || description.includes(\"important\")) {\n        return \"high\";\n    }\n    \n    if (description.includes(\"review\") || description.includes(\"meeting\")) {\n        return \"medium\";\n    }\n    \n    return todo.priority || \"medium\";\n}\n\n// Helper function to estimate completion time\nfunction estimateCompletionTime(todo) {\n    // Simple logic - but in real app would analyze similar tasks\n    const priority = todo.priority || \"medium\";\n    \n    // Estimate in minutes\n    const estimates = {\n        \"high\": 90,\n        \"medium\": 60,\n        \"low\": 45,\n        \"initial\": 60\n    };\n    \n    return estimates[priority];\n}\n\n// Create a schedule for a specific todo\nfunction createScheduleForTodo(todo, dateStr) {\n    // Create a Date object from the target date\n    const date = new Date(dateStr);\n    const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][date.getDay()];\n    \n    // Define working hours based on the day of the week\n    let workingHours;\n    const day = date.getDay();\n    \n    if (day === 0) { // Sunday\n        workingHours = { start: \"10:00\", end: \"14:00\" };\n    } else if (day === 6) { // Saturday\n        workingHours = { start: \"10:00\", end: \"15:00\" };\n    } else { // Weekday\n        workingHours = { start: \"09:00\", end: \"17:00\" };\n    }\n    \n    // Calculate available minutes\n    function timeToMinutes(timeStr) {\n        const [hours, minutes] = timeStr.split(':').map(Number);\n        return hours * 60 + minutes;\n    }\n    \n    function minutesToTime(totalMinutes) {\n        const hours = Math.floor(totalMinutes / 60);\n        const minutes = totalMinutes % 60;\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    }\n    \n    const startMinutes = timeToMinutes(workingHours.start);\n    const endMinutes = timeToMinutes(workingHours.end);\n    const availableMinutes = endMinutes - startMinutes;\n    \n    // Duration based on priority\n    const durations = {\n        \"high\": 90,\n        \"medium\": 60,\n        \"low\": 45,\n        \"initial\": 60\n    };\n    \n    const duration = durations[todo.priority || \"medium\"];\n    \n    // Calculate a good time slot based on priority\n    let startTimeMinutes;\n    if (todo.priority === \"high\") {\n        // Schedule high priority in the morning\n        startTimeMinutes = startMinutes + 60; // 1 hour after start\n    } else if (todo.priority === \"low\") {\n        // Schedule low priority in the afternoon\n        startTimeMinutes = endMinutes - duration - 60; // 1 hour before end\n    } else {\n        // Schedule medium priority in mid-day\n        startTimeMinutes = startMinutes + Math.floor((availableMinutes - duration) / 2);\n    }\n    \n    // Ensure within bounds\n    if (startTimeMinutes < startMinutes) {\n        startTimeMinutes = startMinutes;\n    }\n    if (startTimeMinutes + duration > endMinutes) {\n        startTimeMinutes = endMinutes - duration;\n    }\n    \n    // Format times\n    const startTimeStr = minutesToTime(startTimeMinutes);\n    const endTimeStr = minutesToTime(startTimeMinutes + duration);\n    \n    // Create the schedule\n    return {\n        date: dateStr,\n        weekday: weekday,\n        working_hours: workingHours,\n        schedule: [\n            {\n                todo_id: todo.id,\n                description: todo.description,\n                priority: todo.priority || \"medium\",\n                start_time: startTimeStr,\n                end_time: endTimeStr,\n                duration_minutes: duration\n            }\n        ],\n        total_tasks: 1,\n        total_scheduled_minutes: duration,\n        available_minutes: availableMinutes,\n        utilization_percentage: Math.round((duration / availableMinutes) * 100)\n    };\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "67f56759fa751ebf"
            ]
        ]
    },
    {
        "id": "4ba8ed04634ace50",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "cbb2d887d9760353",
        "name": "process-edit",
        "func": "// Check if we found a todo\nif (!msg.payload || msg.payload.length === 0)\n{\n    // Add more detailed error info\n    const errorInfo = {\n        status: \"error\",\n        message: \"Todo not found\",\n        payload_type: typeof msg.payload,\n        payload_preview: msg.payload ? JSON.stringify(msg.payload).substring(0, 100) : \"null\"\n    };\n\n    return {\n        payload: errorInfo,\n        topic: \"todo/dashboard/editor\"\n    };\n}\n\n// Get the first todo from the results\nconst todo = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\n// Handle MongoDB4 node returning different formats\nlet processedTodo = todo;\nif (todo.result && Array.isArray(todo.result))\n{\n    processedTodo = todo.result[0];\n} else if (todo.value)\n{\n    // MongoDB updateOne returnNewDocument response format\n    processedTodo = todo.value;\n}\n\n// Check if this is a direct edit request from the \"Copy ID\" button\n// In that case, avoid refreshing the todo list\nconst noRefresh = msg.noRefresh === true;\nconst directEdit = msg.directEdit === true;\n\n// Debug information\nnode.warn(\"Processing edit request: noRefresh=\" + noRefresh + \", directEdit=\" + directEdit);\n\n// Return the todo to send to the editor\nlet result = {\n    payload: processedTodo,\n    topic: \"todo/dashboard/editor\",\n    // Pass along the flags\n    noRefresh: noRefresh,\n    directEdit: directEdit\n};\n\nreturn result;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 460,
        "wires": [
            [
                "1e85292a839d5575"
            ]
        ]
    },
    {
        "id": "1e85292a839d5575",
        "type": "switch",
        "z": "e890cb64b583ae67",
        "g": "cbb2d887d9760353",
        "name": "Direct Edit Handler",
        "property": "directEdit",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 460,
        "wires": [
            [
                "f1357f1ec38dd4c9"
            ],
            [
                "6822c3f04ab49643"
            ]
        ]
    },
    {
        "id": "f1357f1ec38dd4c9",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "cbb2d887d9760353",
        "name": "editor-only-pub",
        "mode": "link",
        "links": [
            "31514c435b15540f"
        ],
        "x": 1165,
        "y": 440,
        "wires": []
    },
    {
        "id": "6822c3f04ab49643",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "cbb2d887d9760353",
        "name": "dashboard-pub",
        "mode": "link",
        "links": [
            "8d670b8299f89a5b",
            "9348ae0a3e0c29ad"
        ],
        "x": 1165,
        "y": 480,
        "wires": []
    },
    {
        "id": "8785d4f6e298e040",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "7aede22112869fce",
        "name": "get-completed",
        "func": "// This function prepares a query for completed todos\n// It also respects the global project filter\n\n// Default parameters\nlet match = { status: \"completed\" }; // Only completed todos\nlet sort = { completed_at: -1 }; // Sort by completion date (newest first)\nlet limit = 100; // Only 5 most recent\n\n// Get project filter from global context, if it exists\nconst projectFilter = global.get(\"projectFilter\") || \"all\";\nif (projectFilter !== \"all\")\n{\n    match.project = projectFilter;\n    node.warn(\"Filtering completed todos by project: \" + projectFilter);\n}\n\n// Prepare the aggregation pipeline\nconst pipeline = [\n    // Match stage to filter todos\n    { $match: match },\n\n    // Sort todos by completion date\n    { $sort: sort },\n\n    // Limit to most recent completed todos\n    { $limit: limit }\n];\n\n// Set the query parameters for MongoDB\n// IMPORTANT: For MongoDB4 node, payload must be an array containing the pipeline\nmsg.payload = [pipeline];\nmsg.collection = \"todos\";\nmsg.operation = \"aggregate\";\n\nnode.warn(\"Completed todos pipeline prepared with \" + pipeline.length + \" stages\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 220,
        "wires": [
            [
                "15bb9cf1e224aac9"
            ]
        ]
    },
    {
        "id": "8d670b8299f89a5b",
        "type": "link in",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "dashboard-sub",
        "links": [
            "269581e68f7b96f8",
            "3391269a0dd9f559",
            "67f56759fa751ebf",
            "6822c3f04ab49643",
            "7c064436f034e61c",
            "c714b17a4d69317e",
            "fea965811933e941",
            "15023bdcd355fbf3"
        ],
        "x": 295,
        "y": 1080,
        "wires": [
            [
                "efbe7226e450cc80"
            ]
        ]
    },
    {
        "id": "3b8a43150f8ef5db",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "action-pub",
        "mode": "link",
        "links": [
            "b9cdbb33dfe0a2cd",
            "af45aadd044350e0"
        ],
        "x": 885,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c714b17a4d69317e",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "db5ccc8ce80d9597",
        "name": "dashboard-pub",
        "mode": "link",
        "links": [
            "8d670b8299f89a5b",
            "9348ae0a3e0c29ad"
        ],
        "x": 1225,
        "y": 320,
        "wires": []
    },
    {
        "id": "2303290e972f86e5",
        "type": "complete",
        "z": "e890cb64b583ae67",
        "g": "a78b509a82385b19",
        "name": "RefreshData",
        "scope": [
            "a25dd6b2b2f5f12e",
            "5986f20dd192f3d1",
            "1e85292a839d5575",
            "154f2ad042c04c47"
        ],
        "uncaught": false,
        "x": 410,
        "y": 100,
        "wires": [
            [
                "5af0f9a96534bde4"
            ]
        ]
    },
    {
        "id": "553108cf28ce7b24",
        "type": "debug",
        "z": "e890cb64b583ae67",
        "g": "814deb560dd80e77",
        "name": "dash-sub-debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1585,
        "y": 80,
        "wires": [],
        "l": false
    },
    {
        "id": "d40b17f733d1ab71",
        "type": "set-defaults",
        "z": "e890cb64b583ae67",
        "g": "f994973ef4b87c96",
        "name": "",
        "rules": [
            {
                "p": "payload.project",
                "pt": "msg",
                "to": "projectFilter",
                "tot": "global"
            }
        ],
        "chbox_DoOutputToMessage": true,
        "chbox_SetCurrentToMsg": false,
        "howSend": {
            "text": "payload",
            "type": "msg",
            "modifiedValue": "payload"
        },
        "dropdown_HowManyMessages": "single",
        "dropdownObjOrVal": "value",
        "outputs": 1,
        "x": 355,
        "y": 220,
        "wires": [
            [
                "ca3c7ebfe1f7faeb"
            ]
        ],
        "l": false
    },
    {
        "id": "67f56759fa751ebf",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "9fa5827908a49dc4",
        "name": "dashboard-pub",
        "mode": "link",
        "links": [
            "8d670b8299f89a5b",
            "9348ae0a3e0c29ad"
        ],
        "x": 1165,
        "y": 120,
        "wires": []
    },
    {
        "id": "331cb971cae4185d",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "action-pub",
        "mode": "link",
        "links": [
            "b9cdbb33dfe0a2cd",
            "af45aadd044350e0"
        ],
        "x": 885,
        "y": 1060,
        "wires": []
    },
    {
        "id": "85916c4103facd4f",
        "type": "function",
        "z": "e890cb64b583ae67",
        "name": "copy-todo-id",
        "func": "/**\n * Copy todo ID to clipboard\n * @param {Object} msg - The message object containing the todo data\n * @param {Object} node - The node object\n * @param {Function} send - Function to send messages\n * @return {Object} - Modified message object\n */\nmodule.exports = function (msg, node, send)\n{\n    // This function will be called from the frontend\n    // The actual copy functionality is implemented in the HTML/UI side\n    // This just passes through the message for any additional processing\n\n    // The todo data should be in msg.payload\n    const todo = msg.payload;\n\n    if (!todo || !todo._id)\n    {\n        node.error(\"No valid todo ID found\");\n        msg.payload = { error: \"No valid todo ID found\" };\n        return msg;\n    }\n\n    // We just pass through the message since the clipboard copying\n    // is handled client-side in the browser\n    return msg;\n}; \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b446d06b5fa4c934",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "e4a65e9fb61229b9",
        "name": "get-insights",
        "func": "// Get the todo ID from the payload\nconst todoId = msg.payload.id;\n\nif (!todoId)\n{\n    return {\n        payload: {\n            status: \"error\",\n            message: \"No todo ID provided\"\n        },\n        topic: \"todo/dashboard/error\"\n    };\n}\n\n// Log the request for debugging\nnode.warn(`Getting AI insights for todo ID: ${todoId}`);\n\n// First we need to fetch the todo from MongoDB to get its data\nreturn {\n    payload: {\n        // Query for MongoDB4 node format\n        filter: { id: todoId }\n    },\n    topic: \"todo/action/get_todo_for_insights\",\n    collection: \"todos\",\n    debug: {\n        request_id: `ai_insights_${Date.now()}`,\n        timestamp: new Date().toISOString(),\n        todo_id: todoId\n    }\n}; \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 840,
        "wires": [
            [
                "a422bca90941ac16",
                "377e0c4d336d3db2"
            ]
        ]
    },
    {
        "id": "377e0c4d336d3db2",
        "type": "mongodb4",
        "z": "e890cb64b583ae67",
        "g": "e4a65e9fb61229b9",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "",
        "operation": "find",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "DB-FindTodo",
        "x": 950,
        "y": 840,
        "wires": [
            [
                "7d77c5b75217dbf4"
            ]
        ]
    },
    {
        "id": "a422bca90941ac16",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "e4a65e9fb61229b9",
        "name": "cache-ai-insights",
        "func": "// This function caches AI insights to reduce repeated API calls\n// Uses Node-RED global context to store the cache\n\n// Initialize the cache if it doesn't exist\nconst cache = global.get(\"aiInsightsCache\") || {};\n\n// Add a timestamp to the cache\nconst now = Date.now();\n\n// Check if we're storing or retrieving from the cache\nif (msg.topic === \"todo/action/get_todo_for_insights\")\n{\n    const todoId = msg.payload && msg.payload.filter && msg.payload.filter.id;\n\n    if (!todoId)\n    {\n        // No ID to check cache, pass through\n        return msg;\n    }\n\n    // Check if we have a recent cache entry (less than 30 minutes old)\n    if (cache[todoId] &&\n        cache[todoId].timestamp &&\n        (now - cache[todoId].timestamp < 30 * 60 * 1000))\n    {\n\n        // We have a recent cache hit, return the cached insights\n        return {\n            payload: cache[todoId].data,\n            topic: \"todo/dashboard/insights\",\n            cached: true\n        };\n    }\n\n    // No cache hit or cache expired, continue with API call\n    return msg;\n} else if (msg.topic === \"todo/dashboard/insights\" && !msg.cached)\n{\n    // We're receiving new insights, store them in the cache\n    const todoId = msg.payload && msg.payload.todo && msg.payload.todo.id;\n\n    if (todoId)\n    {\n        // Store the result in the cache with a timestamp\n        cache[todoId] = {\n            data: msg.payload,\n            timestamp: now\n        };\n\n        // Prune old entries (older than 2 hours)\n        Object.keys(cache).forEach(key =>\n        {\n            if (now - cache[key].timestamp > 2 * 60 * 60 * 1000)\n            {\n                delete cache[key];\n            }\n        });\n\n        // Update the global cache\n        global.set(\"aiInsightsCache\", cache);\n    }\n\n    // Pass through the message\n    return msg;\n} else\n{\n    // Any other message type, just pass through\n    return msg;\n} \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 860,
        "wires": [
            [
                "3391269a0dd9f559"
            ]
        ]
    },
    {
        "id": "7d77c5b75217dbf4",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "e4a65e9fb61229b9",
        "name": "prepare-ai-request",
        "func": "// This node prepares the HTTP request for the AI API\n// It formats the message from the get-todo-for-insights node\n\n// Check if we have valid todo data from MongoDB\nif (!msg.payload || !Array.isArray(msg.payload) || msg.payload.length === 0) {\n    return {\n        payload: {\n            status: \"error\",\n            message: \"Todo not found\"\n        },\n        topic: \"todo/dashboard/error\"\n    };\n}\n\n// Get the first todo from the results\nconst todo = msg.payload[0];\n\n// Save the original todo in the message for later use\nmsg.todo = todo;\n\n// Prepare the prompt for the AI\nconst prompt = `Analyze this task and provide insights:\\n\\nTask: ${todo.description}\\nPriority: ${todo.priority || 'medium'}\\nStatus: ${todo.status || 'pending'}\\nProject: ${todo.project || 'Unknown'}\\n\\nPlease provide:\\n1. One sentence analysis of what this task involves\\n2. Suggested resources or approaches\\n3. Estimated effort level\\n4. A unique insight to help complete this efficiently`;\n\n// Prepare the payload for the API request\nmsg.payload = {\n    model: \"qwen2.5-7b-instruct\",\n    messages: [\n        {\n            role: \"user\",\n            content: prompt\n        }\n    ]\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 840,
        "wires": [
            [
                "3efd1f5dff848d65"
            ]
        ]
    },
    {
        "id": "3efd1f5dff848d65",
        "type": "http request",
        "z": "e890cb64b583ae67",
        "g": "e4a65e9fb61229b9",
        "name": "Call AI API",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://REPLACE_WITH_YOUR_AI_API_ENDPOINT:3007/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1270,
        "y": 840,
        "wires": [
            [
                "f9f9f713613236e2"
            ]
        ]
    },
    {
        "id": "f9f9f713613236e2",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "e4a65e9fb61229b9",
        "name": "process-ai-response",
        "func": "// This node processes the response from the AI API endpoint\n// and prepares it for the final processing step\n\n// Check if we have a valid payload\nif (!msg.payload) {\n    return {\n        payload: {\n            status: \"error\",\n            message: \"No AI response received\"\n        },\n        topic: \"todo/dashboard/error\"\n    };\n}\n\n// Get the original todo that we passed through\nconst todo = msg.todo || {};\n\n// Parse the response if it's a string\nlet apiResponse;\nif (typeof msg.payload === 'string') {\n    try {\n        apiResponse = JSON.parse(msg.payload);\n    } catch (error) {\n        return {\n            payload: {\n                status: \"error\",\n                message: \"Failed to parse AI response: \" + error.message,\n                raw_response: msg.payload\n            },\n            topic: \"todo/dashboard/error\"\n        };\n    }\n} else {\n    apiResponse = msg.payload;\n}\n\n// Extract the AI content from the response\nconst aiContent = apiResponse.choices && \n                  apiResponse.choices[0] && \n                  apiResponse.choices[0].message && \n                  apiResponse.choices[0].message.content;\n\nif (!aiContent) {\n    return {\n        payload: {\n            status: \"error\",\n            message: \"Invalid AI response format\",\n            raw_response: apiResponse\n        },\n        topic: \"todo/dashboard/error\"\n    };\n}\n\n// Format the response for display\nconst formattedResponse = {\n    todo: {\n        id: todo.id || \"unknown\",\n        description: todo.description || \"Unknown task\",\n        current_priority: todo.priority || \"medium\",\n        status: todo.status || \"pending\"\n    },\n    ai_insights: {\n        content: aiContent,\n        generated_at: new Date().toISOString(),\n        model: apiResponse.model || \"qwen2.5-7b-instruct\"\n    },\n    suggestions: {\n        suggested_priority: todo.priority || \"medium\",\n        estimated_completion_time: 60, // Default to 1 hour\n        automation_confidence: 75\n    }\n};\n\n// Send the formatted response\nmsg.payload = formattedResponse;\nmsg.topic = \"todo/dashboard/insights\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 820,
        "wires": [
            [
                "f6a49fba95a4ba5f"
            ]
        ]
    },
    {
        "id": "f6a49fba95a4ba5f",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "e4a65e9fb61229b9",
        "name": "format-ai-insights",
        "func": "// This function formats the AI insights for display in the dashboard\n// It takes the raw AI response and makes it more presentation-friendly\n\nif (!msg.payload || !msg.payload.ai_insights)\n{\n    return {\n        payload: {\n            status: \"error\",\n            message: \"No AI insights data found\"\n        },\n        topic: \"todo/dashboard/error\"\n    };\n}\n\n// Get the AI content\nlet aiContent = msg.payload.ai_insights.content;\n\n// Format the content for better display\n// Convert numbered lists to HTML lists if not already formatted\nif (aiContent.match(/^\\d+\\.\\s/gm))\n{\n    // Content has numbered points but probably not formatted as HTML\n    const formattedContent = aiContent.replace(\n        /(\\d+)\\.\\s+(.*?)(?=(?:\\n\\d+\\.|$))/gs,\n        (match, number, text) =>\n        {\n            return `<div class=\"ai-insight-point\"><span class=\"ai-point-number\">${number}.</span> ${text.trim()}</div>`;\n        }\n    );\n\n    msg.payload.ai_insights.content = formattedContent;\n}\n\n// Format bullet points\nif (aiContent.match(/^[•*-]\\s/gm))\n{\n    const formattedContent = aiContent.replace(\n        /[•*-]\\s+(.*?)(?=(?:\\n[•*-]|$))/gs,\n        (match, text) =>\n        {\n            return `<div class=\"ai-insight-bullet\"><span class=\"ai-bullet-point\">•</span> ${text.trim()}</div>`;\n        }\n    );\n\n    msg.payload.ai_insights.content = formattedContent;\n}\n\n// Add additional styling for the AI insights content\nmsg.payload.ai_insights.css = `\n.ai-insight-point, .ai-insight-bullet {\n    margin-bottom: 8px;\n    display: flex;\n}\n\n.ai-point-number, .ai-bullet-point {\n    margin-right: 8px;\n    font-weight: bold;\n    color: #4285f4;\n}\n\n.ai-insights-content h3 {\n    margin-top: 10px;\n    color: #333;\n    font-size: 1em;\n}\n`;\n\nreturn msg; \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 820,
        "wires": [
            [
                "7512a5cbac0343f5",
                "3391269a0dd9f559"
            ]
        ],
        "outputLabels": [
            "dashboard-pub"
        ]
    },
    {
        "id": "7512a5cbac0343f5",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "e4a65e9fb61229b9",
        "name": "handle-ai-errors",
        "func": "// This function handles errors that might occur during AI API calls\n// and provides a graceful fallback\n\n// Check if we have an error message\nif (!msg.error && (!msg.payload || !msg.payload.status || msg.payload.status !== \"error\"))\n{\n    // No error detected, pass through the message unchanged\n    return msg;\n}\n\n// Extract error information\nconst errorMessage = msg.error ? msg.error.message :\n    (msg.payload && msg.payload.message ? msg.payload.message : \"Unknown error\");\n\n// Get the original todo information if available\nconst todo = msg.todo || {};\n\n// Create a fallback response with basic suggestions instead of AI insights\nconst fallbackResponse = {\n    todo: {\n        id: todo.id || \"unknown\",\n        description: todo.description || \"Unknown task\",\n        current_priority: todo.priority || \"medium\",\n        status: todo.status || \"pending\"\n    },\n    ai_insights: {\n        content: `AI insights temporarily unavailable. Please try again later.\\n\\nError: ${errorMessage}`,\n        generated_at: new Date().toISOString(),\n        model: \"fallback\",\n        is_fallback: true\n    },\n    suggestions: {\n        suggested_priority: todo.priority || \"medium\",\n        estimated_completion_time: 60, // Default to 1 hour\n        automation_confidence: 0\n    },\n    error: {\n        message: errorMessage,\n        timestamp: new Date().toISOString()\n    }\n};\n\n// Return the fallback response\nreturn {\n    payload: fallbackResponse,\n    topic: \"todo/dashboard/insights\",\n    error_logged: true\n}; \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 860,
        "wires": [
            [
                "a422bca90941ac16",
                "3391269a0dd9f559"
            ]
        ],
        "outputLabels": [
            "dashboard-pub"
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "3391269a0dd9f559",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "e4a65e9fb61229b9",
        "name": "dashboard-pub",
        "mode": "link",
        "links": [
            "8d670b8299f89a5b",
            "9348ae0a3e0c29ad"
        ],
        "x": 1845,
        "y": 840,
        "wires": []
    },
    {
        "id": "9348ae0a3e0c29ad",
        "type": "link in",
        "z": "e890cb64b583ae67",
        "g": "814deb560dd80e77",
        "name": "dashboard-sub",
        "links": [
            "15023bdcd355fbf3",
            "269581e68f7b96f8",
            "3391269a0dd9f559",
            "67f56759fa751ebf",
            "6822c3f04ab49643",
            "7c064436f034e61c",
            "c714b17a4d69317e",
            "fea965811933e941"
        ],
        "x": 1485,
        "y": 80,
        "wires": [
            [
                "553108cf28ce7b24"
            ]
        ]
    },
    {
        "id": "af45aadd044350e0",
        "type": "link in",
        "z": "e890cb64b583ae67",
        "g": "814deb560dd80e77",
        "name": "actions-sub",
        "links": [
            "21670d9ec4b93356",
            "331cb971cae4185d",
            "3b8a43150f8ef5db",
            "3c68bf135c197c23",
            "63b6d78efd2d69ed"
        ],
        "x": 1485,
        "y": 180,
        "wires": [
            [
                "189055f582621d7c"
            ]
        ]
    },
    {
        "id": "189055f582621d7c",
        "type": "debug",
        "z": "e890cb64b583ae67",
        "g": "814deb560dd80e77",
        "name": "action-sub-debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1715,
        "y": 180,
        "wires": [],
        "l": false
    },
    {
        "id": "154f2ad042c04c47",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "3ab338a0bdb8a589",
        "name": "update-response",
        "func": "// Function to handle responses after MongoDB update operations\n// This is used to format and send responses back to the Todo Editor UI\n\n// Get the MongoDB operation result\nconst mongoResult = msg.payload;\nconst topic = msg.topic || '';\n\n// Log the MongoDB result\nnode.warn(\"Processing update response for operation: \" + topic);\nnode.warn(\"MongoDB result: \" + JSON.stringify(mongoResult));\n\n// Check if it's a response to a todo update\nif (!topic.startsWith('todo/action/')) {\n    // Not a todo action, pass through\n    return msg;\n}\n\n// Extract the action from topic\nconst action = topic.replace('todo/action/', '');\n\n// Handle different actions\nswitch (action) {\n    case 'update':\n    case 'update_multiple':\n        // Handle update responses - support both old and new MongoDB response formats\n        if (\n            // Old format\n            (mongoResult && mongoResult.result && mongoResult.result.ok === 1) ||\n            // New format (mongodb4)\n            (mongoResult && mongoResult.acknowledged === true)\n        ) {\n            // Update was successful\n            // Extract counts from either format\n            const modifiedCount = mongoResult.modifiedCount ||\n                (mongoResult.result && mongoResult.result.nModified) || 0;\n            const matchedCount = mongoResult.matchedCount ||\n                (mongoResult.result && mongoResult.result.n) || 0;\n\n            return {\n                topic: 'todo/dashboard/editor',\n                payload: {\n                    status: 'success',\n                    message: 'Todo updated successfully',\n                    action: action,\n                    modified_count: modifiedCount,\n                    matched_count: matchedCount\n                }\n            };\n        } else {\n            // Update failed or returned unexpected result\n            return {\n                topic: 'todo/dashboard/editor',\n                payload: {\n                    status: 'error',\n                    message: 'Failed to update todo',\n                    action: action,\n                    error: JSON.stringify(mongoResult)\n                }\n            };\n        }\n\n    case 'delete':\n        // Handle delete responses - support both old and new MongoDB response formats\n        if (\n            // Old format\n            (mongoResult && mongoResult.result && mongoResult.result.ok === 1) ||\n            // New format (mongodb4)\n            (mongoResult && mongoResult.acknowledged === true)\n        ) {\n            // Delete was successful\n            const deletedCount = mongoResult.deletedCount ||\n                (mongoResult.result && mongoResult.result.n) || 0;\n\n            return {\n                topic: 'todo/dashboard/editor',\n                payload: {\n                    status: 'success',\n                    message: 'Todo deleted successfully',\n                    action: action,\n                    deleted_count: deletedCount\n                }\n            };\n        } else {\n            // Delete failed or returned unexpected result\n            return {\n                topic: 'todo/dashboard/editor',\n                payload: {\n                    status: 'error',\n                    message: 'Failed to delete todo',\n                    action: action,\n                    error: JSON.stringify(mongoResult)\n                }\n            };\n        }\n\n    case 'complete':\n        // Handle complete responses - support both old and new MongoDB response formats\n        if (\n            // Old format\n            (mongoResult && mongoResult.result && mongoResult.result.ok === 1) ||\n            // New format (mongodb4)\n            (mongoResult && mongoResult.acknowledged === true)\n        ) {\n            // Complete was successful\n            const modifiedCount = mongoResult.modifiedCount ||\n                (mongoResult.result && mongoResult.result.nModified) || 0;\n\n            return {\n                topic: 'todo/dashboard/editor',\n                payload: {\n                    status: 'success',\n                    message: 'Todo marked as completed',\n                    action: action,\n                    modified_count: modifiedCount\n                }\n            };\n        } else {\n            // Complete failed or returned unexpected result\n            return {\n                topic: 'todo/dashboard/editor',\n                payload: {\n                    status: 'error',\n                    message: 'Failed to mark todo as completed',\n                    action: action,\n                    error: JSON.stringify(mongoResult)\n                }\n            };\n        }\n\n    case 'review':\n        // Handle review responses - support both old and new MongoDB response formats\n        if (\n            // Old format\n            (mongoResult && mongoResult.result && mongoResult.result.ok === 1) ||\n            // New format (mongodb4)\n            (mongoResult && mongoResult.acknowledged === true)\n        ) {\n            // Review was successful\n            const modifiedCount = mongoResult.modifiedCount ||\n                (mongoResult.result && mongoResult.result.nModified) || 0;\n\n            return {\n                topic: 'todo/dashboard/editor',\n                payload: {\n                    status: 'success',\n                    message: 'Todo marked for review',\n                    action: action,\n                    modified_count: modifiedCount\n                }\n            };\n        } else {\n            // Review failed or returned unexpected result\n            return {\n                topic: 'todo/dashboard/editor',\n                payload: {\n                    status: 'error',\n                    message: 'Failed to mark todo for review',\n                    action: action,\n                    error: JSON.stringify(mongoResult)\n                }\n            };\n        }\n\n    default:\n        // Unknown action, pass through\n        return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 640,
        "wires": [
            [
                "7c064436f034e61c"
            ]
        ]
    },
    {
        "id": "7c064436f034e61c",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "3ab338a0bdb8a589",
        "name": "dashboard-pub",
        "mode": "link",
        "links": [
            "8d670b8299f89a5b",
            "9348ae0a3e0c29ad"
        ],
        "x": 1265,
        "y": 640,
        "wires": []
    },
    {
        "id": "efbe7226e450cc80",
        "type": "switch",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "Route by Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "todo/dashboard/todos",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/dashboard/editor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/dashboard/suggestions",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/dashboard/insights",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 420,
        "y": 1080,
        "wires": [
            [
                "75fd102f9bbc89f7"
            ],
            [
                "9a892952c84e8362"
            ],
            [],
            []
        ]
    },
    {
        "id": "75fd102f9bbc89f7",
        "type": "ui_template",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "group": "g-todos",
        "name": "Todo List",
        "order": 20,
        "width": 16,
        "height": 23,
        "format": "<!-- Todo List Panel for FastMCP Todo Server Dashboard -->\n\n<style>\n    .todo-container {\n        font-family: 'Roboto', sans-serif;\n        padding: 0 10px;\n    }\n\n    .todo-stats {\n        background-color: #f5f5f5;\n        border-radius: 8px;\n        padding: 15px;\n        margin-bottom: 20px;\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .stats-item {\n        margin-right: 25px;\n        margin-bottom: 10px;\n        text-align: center;\n    }\n\n    .stats-value {\n        font-size: 24px;\n        font-weight: 500;\n        color: #212121;\n        margin-bottom: 5px;\n    }\n\n    .stats-label {\n        font-size: 13px;\n        color: #757575;\n    }\n\n    .todo-actions {\n        margin-bottom: 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .filter-options {\n        display: flex;\n        gap: 10px;\n    }\n\n    .filter-button {\n        padding: 6px 12px;\n        border-radius: 16px;\n        border: 1px solid #e0e0e0;\n        background-color: white;\n        font-size: 13px;\n        cursor: pointer;\n        transition: all 0.2s;\n    }\n\n    .filter-button:hover {\n        background-color: #f5f5f5;\n    }\n\n    .filter-button.active {\n        background-color: #e3f2fd;\n        border-color: #90caf9;\n        color: #1976d2;\n    }\n\n    .search-field {\n        position: relative;\n        flex-grow: 1;\n        max-width: 300px;\n        margin-left: 10px;\n    }\n\n    .search-field input {\n        width: 100%;\n        padding: 8px 12px 8px 35px;\n        border-radius: 20px;\n        border: 1px solid #e0e0e0;\n        font-size: 14px;\n    }\n\n    .search-icon {\n        position: absolute;\n        left: 12px;\n        top: 50%;\n        transform: translateY(-50%);\n        color: #9e9e9e;\n        font-size: 16px;\n    }\n\n    .todo-list {\n        margin-bottom: 20px;\n    }\n\n    .todo-item {\n        margin-bottom: 15px;\n        padding: 0;\n        border-radius: 8px;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);\n        background-color: white;\n        transition: all 0.3s ease;\n        overflow: hidden;\n    }\n\n    .todo-item:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .todo-item.high {\n        border-left: 6px solid #e53935;\n    }\n\n    .todo-item.medium,\n    .todo-item.initial {\n        border-left: 6px solid #fb8c00;\n    }\n\n    .todo-item.low {\n        border-left: 6px solid #43a047;\n    }\n\n    .todo-content {\n        padding: 15px;\n        cursor: pointer;\n    }\n\n    .todo-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 10px;\n    }\n\n    .todo-title {\n        font-weight: 500;\n        font-size: 16px;\n        color: #212121;\n        margin-right: 10px;\n        word-break: break-word;\n    }\n\n    .todo-meta {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 8px;\n        align-items: center;\n        margin-top: 10px;\n        color: #757575;\n        font-size: 13px;\n    }\n\n    .todo-priority {\n        font-size: 12px;\n        text-transform: uppercase;\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-weight: 500;\n        flex-shrink: 0;\n    }\n\n    .todo-item.high .todo-priority {\n        background-color: #ffebee;\n        color: #c62828;\n    }\n\n    .todo-item.medium .todo-priority,\n    .todo-item.initial .todo-priority {\n        background-color: #fff3e0;\n        color: #e65100;\n    }\n\n    .todo-item.low .todo-priority {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .todo-date {\n        color: #757575;\n        font-size: 13px;\n        flex-shrink: 0;\n    }\n\n    .todo-id {\n        font-size: 12px;\n        color: #9e9e9e;\n        font-family: monospace;\n    }\n\n    .todo-buttons {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 8px;\n        padding: 0 15px 15px 15px;\n    }\n\n    .action-button {\n        padding: 6px 12px;\n        border-radius: 4px;\n        font-size: 13px;\n        text-transform: uppercase;\n        font-weight: 500;\n        border: none;\n        cursor: pointer;\n        transition: background-color 0.2s;\n        display: flex;\n        align-items: center;\n    }\n\n    .action-button .action-icon {\n        margin-right: 6px;\n    }\n\n    .complete-button {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .complete-button:hover {\n        background-color: #c8e6c9;\n    }\n\n    .suggestions-button {\n        background-color: #e3f2fd;\n        color: #1565c0;\n    }\n\n    .suggestions-button:hover {\n        background-color: #bbdefb;\n    }\n\n    .copy-id-button {\n        background-color: #f3e5f5;\n        color: #6a1b9a;\n    }\n\n    .copy-id-button:hover {\n        background-color: #e1bee7;\n    }\n\n    .schedule-button {\n        background-color: #fff3e0;\n        color: #e65100;\n    }\n\n    .schedule-button:hover {\n        background-color: #ffe0b2;\n    }\n\n    .empty-message {\n        color: #757575;\n        font-style: italic;\n        padding: 20px;\n        text-align: center;\n        background-color: #f5f5f5;\n        border-radius: 8px;\n    }\n\n    .recently-completed {\n        margin-top: 30px;\n    }\n\n    .section-header {\n        font-size: 18px;\n        font-weight: 500;\n        color: #424242;\n        margin-bottom: 15px;\n        border-bottom: 2px solid #e0e0e0;\n        padding-bottom: 8px;\n    }\n\n    .completed-item {\n        padding: 10px 15px;\n        border-radius: 8px;\n        background-color: #f5f5f5;\n        margin-bottom: 10px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .completed-title {\n        color: #757575;\n        text-decoration: line-through;\n        margin-right: 10px;\n    }\n\n    .completed-time {\n        font-size: 12px;\n        color: #9e9e9e;\n    }\n\n    /* Project filter badge */\n    .project-filter-badge {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n        padding: 5px 10px;\n        border-radius: 16px;\n        font-size: 14px;\n        font-weight: 500;\n        display: inline-flex;\n        align-items: center;\n        margin-right: 10px;\n    }\n\n    .project-filter-badge i {\n        margin-right: 5px;\n    }\n\n    .project-filter-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 15px;\n    }\n\n    .project-title {\n        font-size: 20px;\n        font-weight: 500;\n        color: #424242;\n    }\n\n    /* Debug info */\n    .debug-info {\n        margin-top: 20px;\n        padding: 10px;\n        background-color: #f8f9fa;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        font-family: monospace;\n        font-size: 12px;\n        white-space: pre-wrap;\n    }\n\n    /* Review status styling */\n    .review {\n        border-left-color: #9c27b0;\n    }\n    \n    .review .todo-priority {\n        background-color: #f3e5f5;\n        color: #6a1b9a;\n    }\n\n    .review-button {\n        background-color: #f3e5f5;\n        color: #6a1b9a;\n    }\n\n    .review-button:hover {\n        background-color: #e1bee7;\n    }\n</style>\n\n<div class=\"todo-container\">\n    <div class=\"project-filter-header\">\n        <div class=\"project-title\">\n            <span ng-if=\"parsedPayload.active_project_filter && parsedPayload.active_project_filter !== 'all'\">\n                <span class=\"project-filter-badge\"><i class=\"fa fa-folder-open\"></i> {{parsedPayload.active_project_filter}}</span>\n                Todo List\n            </span>\n            <span ng-if=\"!parsedPayload.active_project_filter || parsedPayload.active_project_filter === 'all'\">\n                All Projects Todo List\n            </span>\n        </div>\n    </div>\n\n    <div class=\"todo-stats\">\n        <div class=\"stats-item\">\n            <div class=\"stats-value\">{{parsedPayload.total_pending || 0}}</div>\n            <div class=\"stats-label\">Pending Tasks</div>\n        </div>\n\n        <div class=\"stats-item\" ng-if=\"parsedPayload.total_review\">\n            <div class=\"stats-value\" style=\"color: #9c27b0;\">{{parsedPayload.total_review || 0}}</div>\n            <div class=\"stats-label\">In Review</div>\n        </div>\n\n        <div class=\"stats-item\">\n            <div class=\"stats-value\">{{parsedPayload.total_completed || 0}}</div>\n            <div class=\"stats-label\">Completed Tasks</div>\n        </div>\n\n        <div class=\"stats-item\" ng-if=\"parsedPayload.high_priority\">\n            <div class=\"stats-value\" style=\"color: #e53935;\">{{parsedPayload.high_priority || 0}}</div>\n            <div class=\"stats-label\">High Priority</div>\n        </div>\n\n        <div class=\"stats-item\">\n            <div class=\"stats-value\" style=\"color: #fb8c00;\">{{parsedPayload.medium_priority || 0}}</div>\n            <div class=\"stats-label\">Medium Priority</div>\n        </div>\n\n        <div class=\"stats-item\">\n            <div class=\"stats-value\" style=\"color: #43a047;\">{{parsedPayload.low_priority || 0}}</div>\n            <div class=\"stats-label\">Low Priority</div>\n        </div>\n    </div>\n\n    <div class=\"todo-actions\">\n        <div class=\"filter-options\">\n            <button class=\"filter-button active\" ng-click=\"filterTodos('all')\">All</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('high')\">High Priority</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('medium')\">Medium</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('low')\">Low</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('review')\">In Review</button>\n        </div>\n\n        <div class=\"search-field\">\n            <i class=\"fa fa-search search-icon\"></i>\n            <input type=\"text\" placeholder=\"Search tasks...\" ng-model=\"searchText\" />\n        </div>\n    </div>\n\n    <div class=\"todo-list\">\n        <div ng-if=\"parsedPayload.todos && parsedPayload.todos.length > 0\">\n            <div ng-repeat=\"item in parsedPayload.todos | filter:searchFilter\" class=\"todo-item {{item.priority}}\">\n                <div class=\"todo-content\" ng-click=\"item.expanded = !item.expanded\">\n                    <div class=\"todo-header\">\n                        <div class=\"todo-title\">{{item.description}}</div>\n                        <div>\n                            <span class=\"todo-priority\">{{item.priority}}</span>\n                        </div>\n                    </div>\n\n                    <div class=\"todo-meta\">\n                        <span class=\"todo-date\" ng-if=\"item.created_at\">\n            Created: {{item.created_at | date:'MMM d, yyyy'}}\n          </span>\n                        <span ng-if=\"item.project\" style=\"color: #2e7d32; margin-right: 10px;\">\n            <i class=\"fa fa-folder-o\"></i> {{item.project}}\n          </span>\n                        <span class=\"todo-id\" ng-if=\"item.id\">\n            #{{item.id.substring(0,8)}}\n          </span>\n                    </div>\n                </div>\n\n                <div class=\"todo-buttons\">\n                    <button class=\"action-button complete-button\" ng-click=\"send({payload: {action: 'complete', id: item.id}})\">\n          <i class=\"fa fa-check action-icon\"></i> Complete\n        </button>\n                    <button class=\"action-button suggestions-button\" ng-click=\"send({payload: {action: 'suggestions', id: item.id}})\">\n          <i class=\"fa fa-lightbulb-o action-icon\"></i> AI Insights\n        </button>\n                    <button class=\"action-button review-button\" ng-click=\"send({payload: {action: 'review', id: item.id}})\" ng-if=\"item.status !== 'review'\">\n          <i class=\"fa fa-eye action-icon\"></i> Mark for Review\n        </button>\n                    <button class=\"action-button copy-id-button\" ng-click=\"copyToClipboard(item.id)\">\n          <i class=\"fa fa-clipboard action-icon\"></i> Edit\n        </button>\n                </div>\n            </div>\n        </div>\n\n        <div ng-if=\"!parsedPayload.todos || parsedPayload.todos.length === 0\" class=\"empty-message\">\n            <p>No pending todo items found.</p>\n            <p ng-if=\"parsedPayload.active_project_filter && parsedPayload.active_project_filter !== 'all'\">\n                Try selecting a different project filter or check \"All Projects\".\n            </p>\n            <p ng-if=\"!parsedPayload.active_project_filter || parsedPayload.active_project_filter === 'all'\">\n                Create new tasks to get started.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"recently-completed\" ng-if=\"parsedPayload.completed && parsedPayload.completed.length > 0\">\n        <h3 class=\"section-header\">Recently Completed</h3>\n        <div ng-repeat=\"item in parsedPayload.completed | limitTo:5\" class=\"completed-item\">\n            <div class=\"completed-title\">{{item.description}}</div>\n            <div class=\"completed-time\" ng-if=\"item.completed_at\">\n                {{item.completed_at | date:'MMM d, h:mm a'}}\n            </div>\n        </div>\n    </div>\n\n    <!-- Debug section to help troubleshoot data flow -->\n    <div class=\"debug-info\">\n        <div>Last Updated: {{parsedPayload.last_updated | date:'MMM d, yyyy h:mm:ss a'}}</div>\n        <div>Topic: {{msg.topic}}</div>\n        <div>Active Project Filter: {{parsedPayload.active_project_filter || 'all'}}</div>\n        <div>Todos Count: {{(parsedPayload.todos || []).length}}</div>\n        <div>Completed Count: {{(parsedPayload.completed || []).length}}</div>\n    </div>\n</div>\n\n<script>\n    (function(scope) {\n  // Parse JSON payload if it's a string\n  scope.$watch('msg.payload', function(payload) {\n    if (payload && typeof payload === 'string') {\n      try {\n        scope.parsedPayload = JSON.parse(payload);\n      } catch(e) {\n        console.error('Error parsing payload JSON:', e);\n        scope.parsedPayload = {};\n      }\n    } else {\n      scope.parsedPayload = payload || {};\n    }\n  });\n\n  // Function to copy todo ID to clipboard and load in editor\n  scope.copyToClipboard = function(id) {\n    console.info(id)\n    if (!id) return;\n\n    // Create a temporary input element\n    var tempInput = document.createElement(\"input\");\n    tempInput.value = id;\n    document.body.appendChild(tempInput);\n\n    // Select and copy the text\n    tempInput.select();\n    document.execCommand(\"copy\");\n\n    // Remove the temporary element\n    document.body.removeChild(tempInput);\n    \n    // Instead of using scope.send which triggers Angular's digest cycle,\n    // use a direct message to avoid refreshing the list\n    var evt = new CustomEvent('node-red-todo-edit', {\n      detail: {\n        id: id\n      }\n    });\n    document.dispatchEvent(evt);\n    \n    // Also create a hidden link to pass the ID directly to the editor tab\n    var editLink = document.createElement(\"a\");\n    editLink.href = \"#edit-tab\";\n    editLink.style.display = \"none\";\n    editLink.setAttribute(\"data-todo-id\", id);\n    editLink.setAttribute(\"data-action\", \"edit\");\n    editLink.setAttribute(\"onclick\", \"setTimeout(function() { this.remove(); }, 100);\");\n    document.body.appendChild(editLink);\n    editLink.click();\n    \n    // Send message to load this todo in the editor via Node-RED\n    // Use a direct approach with a custom event listener\n    var msgData = {\n      topic: \"todo/action/edit\",\n      payload: {id: id}\n    };\n    \n    // Use a timeout to prevent UI refresh issues\n    setTimeout(function() {\n      // Use a custom message passing technique\n      if (window.postMessage) {\n        window.postMessage({\n          type: \"node-red-todo-edit\",\n          data: msgData\n        }, \"*\");\n      }\n      \n      // Fallback to standard send but without applying scope\n      try {\n        scope.send(msgData);\n      } catch (e) {\n        console.error(\"Error sending edit message:\", e);\n      }\n    }, 100);\n\n    // Show non-blocking feedback\n    var notification = document.createElement(\"div\");\n    notification.textContent = \"ID copied to clipboard and loaded in editor: \" + id;\n    notification.style.position = \"fixed\";\n    notification.style.bottom = \"20px\";\n    notification.style.right = \"20px\";\n    notification.style.padding = \"10px 15px\";\n    notification.style.backgroundColor = \"#4CAF50\";\n    notification.style.color = \"white\";\n    notification.style.borderRadius = \"4px\";\n    notification.style.boxShadow = \"0 2px 10px rgba(0,0,0,0.2)\";\n    notification.style.zIndex = \"9999\";\n    document.body.appendChild(notification);\n    \n    // Remove notification after 3 seconds\n    setTimeout(function() {\n      document.body.removeChild(notification);\n    }, 3000);\n    \n    // Prevent event propagation to avoid Angular digest cycle\n    return false;\n  };\n\n  // Initialize active filter\n  scope.activeFilter = 'all';\n  scope.searchText = '';\n\n  // Filter function for todos\n  scope.filterTodos = function(filter) {\n    scope.activeFilter = filter;\n\n    // Update active button styling\n    angular.element(document.querySelectorAll('.filter-button'))\n      .removeClass('active');\n    angular.element(event.target).addClass('active');\n  };\n\n  // Search filter function\n  scope.searchFilter = function(item) {\n    // First apply priority filter\n    if (scope.activeFilter === 'review') {\n      return item.status === 'review';\n    } else if (scope.activeFilter !== 'all' && item.priority !== scope.activeFilter) {\n      return false;\n    }\n\n    // Then apply text search if there is search text\n    if (scope.searchText && scope.searchText.length > 0) {\n      return item.description.toLowerCase().includes(scope.searchText.toLowerCase());\n    }\n\n    return true;\n  };\n})(scope);\n</script>\n\n<!--\nNode-RED Message Format:\n{\n\"todos\": [\n  {\n    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"description\": \"Prepare weekly report\",\n    \"priority\": \"high\",\n    \"status\": \"pending\",\n    \"created_at\": 1682424116000,\n    \"project\": \"documentation\"\n  },\n  {\n    \"id\": \"223e4567-e89b-12d3-a456-426614174001\",\n    \"description\": \"Schedule team meeting\",\n    \"priority\": \"medium\",\n    \"status\": \"pending\",\n    \"created_at\": 1682510516000,\n    \"project\": \"fastmcp\"\n  }\n],\n\"completed\": [\n  {\n    \"id\": \"323e4567-e89b-12d3-a456-426614174002\",\n    \"description\": \"Review pull request\",\n    \"priority\": \"high\",\n    \"status\": \"completed\",\n    \"created_at\": 1682424116000,\n    \"completed_at\": 1682434916000,\n    \"project\": \"hammerspoon\"\n  }\n],\n\"total_pending\": 2,\n\"total_completed\": 1,\n\"high_priority\": 1,\n\"medium_priority\": 1,\n\"low_priority\": 0,\n\"active_project_filter\": \"all\",\n\"last_updated\": \"2023-05-15T14:30:00Z\"\n}\n-->\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "98c0aca7ec2161cc"
            ]
        ]
    },
    {
        "id": "9a892952c84e8362",
        "type": "ui_template",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "group": "fed465747110fa96",
        "name": "ToDo Edit",
        "order": 1,
        "width": 18,
        "height": 29,
        "format": "<!-- Todo Item Editor Panel for FastMCP Todo Server Dashboard -->\n\n<script>\n    (function(scope) {\n    // Parse JSON payload if it's a string\n    scope.$watch('msg.payload', function(payload) {\n      if (payload && typeof payload === 'string') {\n        try {\n          scope.parsedPayload = JSON.parse(payload);\n        } catch(e) {\n          console.error('Error parsing payload JSON:', e);\n          scope.parsedPayload = {};\n        }\n      } else {\n        scope.parsedPayload = payload || {};\n      }\n\n      // Log the payload for debugging\n      console.log('Received payload:', scope.parsedPayload);\n\n      // Handle status messages from backend operations\n      if (scope.parsedPayload && scope.parsedPayload.status) {\n        handleStatusMessage(scope.parsedPayload);\n      }\n\n      // Initialize edit fields immediately when payload changes\n      if (scope.parsedPayload && scope.parsedPayload.id) {\n        initializeEditFields(scope.parsedPayload);\n      }\n    });\n\n    // Function to handle status messages from backend\n    function handleStatusMessage(payload) {\n      console.log('Handling status message:', payload);\n\n      if (payload.status === 'error' || payload.status === 'success' ||\n          payload.status === 'warning' || payload.status === 'info') {\n\n        scope.updateStatus = {\n          message: payload.message || 'Operation ' + (payload.status === 'success' ? 'completed' : payload.status),\n          type: payload.status\n        };\n\n        // Automatically clear status messages after a delay\n        setTimeout(function() {\n          scope.$apply(function() {\n            scope.updateStatus = null;\n          });\n        }, 5000);\n      }\n    }\n\n    // List of available projects for dropdown\n    scope.availableProjects = [\n    \"regressiontestkit\",\n    \"madness_interactive\",\n    \"omnispindle\",\n    \"swarmonomicon\",\n    \"balena_device_management\",\n    \"cogwyrm\",\n    \"docker_implementation\",\n    \"documentation\",\n    \"eventghost-rust\",\n    \"fastmcp\",\n    \"hammerghost\",\n    \"hammerspoon\",\n    \"quality_assurance\",\n    \"inventorium\",\n    \"spindlewrit\"\n];\n\n    // Function to initialize edit fields with proper format handling\n    function initializeEditFields(todo) {\n      console.log('Initializing edit fields with:', todo);\n\n      // Store original data for comparison when saving\n      scope.originalTodo = JSON.parse(JSON.stringify(todo));\n\n      // Initialize edit fields with proper defaults\n      scope.editDescription = todo.description || '';\n      scope.editPriority = todo.priority ? todo.priority.toLowerCase() : 'initial';\n      scope.editStatus = todo.status ? todo.status.toLowerCase() : 'pending';\n      scope.editProject = todo.project || '';\n      scope.editDuration = todo.duration_minutes || 0;\n      scope.editNotes = todo.notes || '';\n      scope.editEnhancedDescription = todo.enhanced_description || '';\n      scope.editTicket = todo.ticket || '';\n\n      // Handle date format correctly for the date input\n      if (todo.due_date) {\n        // If due_date is already in YYYY-MM-DD format\n        if (typeof todo.due_date === 'string' && /^\\d{4}-\\d{2}-\\d{2}$/.test(todo.due_date)) {\n          scope.editDueDate = todo.due_date;\n        } else {\n          // Try to convert from timestamp or other format\n          try {\n            const date = new Date(todo.due_date);\n            if (!isNaN(date.getTime())) {\n              scope.editDueDate = date.toISOString().split('T')[0];\n            } else {\n              scope.editDueDate = '';\n            }\n          } catch(e) {\n            console.error('Error formatting date:', e);\n            scope.editDueDate = '';\n          }\n        }\n      } else {\n        scope.editDueDate = '';\n      }\n\n      console.log('Edit fields initialized:', {\n        desc: scope.editDescription,\n        priority: scope.editPriority,\n        status: scope.editStatus,\n        project: scope.editProject,\n        dueDate: scope.editDueDate,\n        duration: scope.editDuration,\n        notes: scope.editNotes\n      });\n    }\n\n    // Function to update a todo field\n    scope.updateTodoField = function(field, value) {\n      scope.send({\n        topic: \"todo/action/update\",\n        payload: {\n          id: scope.parsedPayload.id,\n          field: field,\n          value: value\n        }\n      });\n\n      // Show temporary feedback\n      scope.updateStatus = {\n        message: `Updating ${field}...`,\n        type: \"info\"\n      };\n    };\n\n    // Helper function to check if two values are different for update\n    function hasValueChanged(newVal, originalVal) {\n      // Handle undefined/null/empty string cases\n      if (newVal === undefined || newVal === null) newVal = '';\n      if (originalVal === undefined || originalVal === null) originalVal = '';\n\n      // Convert numbers to strings for comparison\n      if (typeof newVal === 'number') newVal = newVal.toString();\n      if (typeof originalVal === 'number') originalVal = originalVal.toString();\n\n      // Convert everything to strings and normalize case for comparison\n      return String(newVal).toLowerCase() !== String(originalVal).toLowerCase();\n    }\n\n    // Add a change handler to update form values and log changes\n    scope.handleFieldChange = function(field, value) {\n      console.log(`Field changed: ${field} = `, value);\n      \n      // Explicitly update the scope variable\n      switch(field) {\n        case 'description':\n          scope.editDescription = value;\n          break;\n        case 'priority':\n          scope.editPriority = value;\n          break;\n        case 'status':\n          scope.editStatus = value;\n          break;\n        case 'project':\n          scope.editProject = value;\n          break;\n        case 'due_date':\n          scope.editDueDate = value;\n          break;\n        case 'duration':\n          scope.editDuration = value;\n          break;\n        case 'notes':\n          scope.editNotes = value;\n          break;\n        case 'enhanced_description':\n          scope.editEnhancedDescription = value;\n          break;\n        case 'ticket':\n          scope.editTicket = value;\n          break;\n      }\n    };\n\n    // Function to save all changes at once\n    scope.saveAllChanges = function() {\n      // Make sure we have a valid todo ID\n      if (!scope.parsedPayload || !scope.parsedPayload.id) {\n        console.error('Cannot save changes: No todo ID found');\n        scope.updateStatus = {\n          message: \"Error: No todo ID found\",\n          type: \"error\"\n        };\n        return;\n      }\n\n      // Force Angular to update scope values from DOM before saving\n      try {\n        // Use timeout to ensure DOM changes are synced to scope\n        setTimeout(function() {\n          scope.$apply();\n        }, 0);\n      } catch (e) {\n        // Ignore apply errors\n      }\n\n      // Log all form field values for debugging\n      console.log('Form field values before save:', {\n        description: scope.editDescription,\n        priority: scope.editPriority,\n        status: scope.editStatus,\n        project: scope.editProject,\n        due_date: scope.editDueDate,\n        duration: scope.editDuration,\n        notes: scope.editNotes,\n        enhanced_description: scope.editEnhancedDescription,\n        ticket: scope.editTicket\n      });\n\n      const updates = {};\n\n      // Include all non-empty fields in the update (don't try to detect changes)\n      if (scope.editDescription !== undefined) {\n        updates.description = scope.editDescription;\n      }\n\n      if (scope.editPriority !== undefined) {\n        updates.priority = scope.editPriority;\n      }\n\n      if (scope.editDueDate !== undefined) {\n        updates.due_date = scope.editDueDate;\n      }\n\n      if (scope.editStatus !== undefined) {\n        updates.status = scope.editStatus;\n      }\n\n      if (scope.editProject !== undefined) {\n        updates.project = scope.editProject;\n      }\n\n      if (scope.editDuration !== undefined) {\n        updates.duration_minutes = parseInt(scope.editDuration) || 0;\n      }\n\n      if (scope.editNotes !== undefined) {\n        updates.notes = scope.editNotes;\n      }\n      \n      if (scope.editEnhancedDescription !== undefined) {\n        updates.enhanced_description = scope.editEnhancedDescription;\n      }\n      \n      if (scope.editTicket !== undefined) {\n        updates.ticket = scope.editTicket;\n      }\n\n      // Log the updates for debugging\n      console.log('Sending updates:', updates);\n\n      // Only send if there are actual fields to update\n      if (Object.keys(updates).length > 0) {\n        scope.send({\n          topic: \"todo/action/update_multiple\",\n          payload: {\n            id: scope.parsedPayload.id,\n            updates: updates\n          }\n        });\n\n        // Show feedback to user\n        scope.updateStatus = {\n          message: \"Saving changes...\",\n          type: \"info\"\n        };\n      } else {\n        console.log('No fields to update');\n        scope.updateStatus = {\n          message: \"No changes to save\",\n          type: \"warning\"\n        };\n\n        // Set a timeout to clear the message after a few seconds\n        setTimeout(function() {\n          scope.$apply(function() {\n            scope.updateStatus = null;\n          });\n        }, 3000);\n      }\n    };\n\n    // Initialize with no update status\n    scope.updateStatus = null;\n  })(scope);\n</script>\n\n<style>\n    .editor-container {\n        font-family: 'Roboto', sans-serif;\n        padding: 0 10px;\n        background-color: #f9f9fb;\n    }\n\n    .editor-header {\n        margin-bottom: 20px;\n        background-color: #1a237e;\n        color: white;\n        padding: 15px;\n        border-radius: 8px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.15);\n    }\n\n    .editor-title {\n        font-size: 22px;\n        font-weight: 600;\n        color: white;\n        margin-bottom: 5px;\n    }\n\n    .editor-form {\n        background-color: white;\n        border-radius: 8px;\n        padding: 16px;\n        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);\n        margin-bottom: 20px;\n        border-top: 4px solid #1a237e;\n    }\n\n    .form-group {\n        margin-bottom: 12px;\n    }\n\n    .form-label {\n        display: block;\n        font-weight: 500;\n        margin-bottom: 4px;\n        color: #333;\n    }\n    \n    .form-section-subtitle {\n        font-size: 13px;\n        color: #757575;\n        margin-top: -5px;\n        margin-bottom: 8px;\n    }\n\n    .form-control {\n        width: 100%;\n        padding: 8px 10px;\n        border: 1px solid #e0e0e0;\n        border-radius: 4px;\n        font-size: 14px;\n        transition: all 0.2s;\n        background-color: #fcfcfc;\n    }\n\n    .form-control:focus {\n        border-color: #2196f3;\n        outline: none;\n        box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);\n    }\n    \n    .enhanced-description {\n        font-family: 'Consolas', 'Monaco', monospace;\n        font-size: 13px;\n        line-height: 1.5;\n        background-color: #f5f7fa;\n    }\n\n    .form-row {\n        display: flex;\n        gap: 12px;\n        margin-bottom: 12px;\n    }\n\n    .form-col {\n        flex: 1;\n    }\n\n    .btn {\n        padding: 10px 16px;\n        border-radius: 4px;\n        font-size: 14px;\n        font-weight: 500;\n        cursor: pointer;\n        transition: all 0.2s;\n        border: none;\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .btn:hover {\n        transform: translateY(-1px);\n        box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n    }\n\n    .btn:active {\n        transform: translateY(1px);\n        box-shadow: 0 1px 2px rgba(0,0,0,0.1);\n    }\n\n    .btn-icon {\n        margin-right: 8px;\n    }\n\n    .btn-primary {\n        background-color: #2196f3;\n        color: white;\n    }\n\n    .btn-primary:hover {\n        background-color: #1976d2;\n    }\n\n    .btn-danger {\n        background-color: #f44336;\n        color: white;\n    }\n\n    .btn-danger:hover {\n        background-color: #d32f2f;\n    }\n\n    .btn-success {\n        background-color: #4caf50;\n        color: white;\n    }\n\n    .btn-success:hover {\n        background-color: #388e3c;\n    }\n\n    .btn-purple {\n        background-color: #9c27b0;\n        color: white;\n    }\n\n    .btn-purple:hover {\n        background-color: #8e24aa;\n    }\n\n    .action-buttons {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 10px;\n        margin-top: 20px;\n    }\n\n    .todo-id-badge {\n        font-family: monospace;\n        font-size: 12px;\n        color: #424242;\n        background-color: #f0f0f0;\n        padding: 6px 10px;\n        border-radius: 4px;\n        margin-bottom: 20px;\n        display: inline-block;\n        border-left: 3px solid #1a237e;\n    }\n\n    .form-section {\n        margin-bottom: 18px;\n        border-bottom: 1px solid #e0e0e0;\n        padding-bottom: 12px;\n    }\n\n    .form-section-title {\n        font-size: 16px;\n        font-weight: 600;\n        color: #1a237e;\n        margin-bottom: 12px;\n        padding-bottom: 6px;\n        border-bottom: 2px solid #e3f2fd;\n    }\n\n    .status-indicator {\n        display: inline-block;\n        width: 12px;\n        height: 12px;\n        border-radius: 50%;\n        margin-right: 8px;\n    }\n\n    .status-pending {\n        background-color: #ff9800;\n    }\n\n    .status-completed {\n        background-color: #4caf50;\n    }\n    \n    .status-review {\n        background-color: #9c27b0;\n    }\n\n    .status-badge {\n        padding: 4px 10px;\n        border-radius: 12px;\n        font-size: 12px;\n        font-weight: 500;\n        margin-left: 10px;\n        text-transform: uppercase;\n    }\n\n    .status-pending-badge {\n        background-color: #fff3e0;\n        color: #e65100;\n    }\n\n    .status-completed-badge {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n    \n    .status-review-badge {\n        background-color: #f3e5f5;\n        color: #6a1b9a;\n    }\n\n    /* Priority color indicators */\n    .priority-high {\n        border-left: 4px solid #f44336;\n    }\n    \n    .priority-medium {\n        border-left: 4px solid #ff9800;\n    }\n    \n    .priority-low {\n        border-left: 4px solid #4caf50;\n    }\n    \n    .priority-initial {\n        border-left: 4px solid #9e9e9e;\n    }\n\n    .empty-state {\n        padding: 40px;\n        text-align: center;\n        background-color: #f5f5f5;\n        border-radius: 8px;\n        color: #757575;\n        box-shadow: inset 0 0 5px rgba(0,0,0,0.05);\n        border: 1px dashed #ccc;\n    }\n\n    .todo-lookup {\n        display: flex;\n        gap: 10px;\n        margin-bottom: 20px;\n        background-color: white;\n        padding: 15px;\n        border-radius: 8px;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n    }\n\n    .todo-lookup input {\n        flex: 1;\n    }\n\n    .update-status {\n        margin-top: 10px;\n        padding: 10px 15px;\n        border-radius: 4px;\n        font-size: 14px;\n        box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        animation: fadeIn 0.3s ease-in;\n    }\n\n    @keyframes fadeIn {\n        from { opacity: 0; transform: translateY(-10px); }\n        to { opacity: 1; transform: translateY(0); }\n    }\n\n    .update-status.info {\n        background-color: #e3f2fd;\n        color: #1565c0;\n        border-left: 4px solid #1565c0;\n    }\n\n    .update-status.success {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n        border-left: 4px solid #2e7d32;\n    }\n\n    .update-status.warning {\n        background-color: #fff3e0;\n        color: #e65100;\n        border-left: 4px solid #e65100;\n    }\n\n    .update-status.error {\n        background-color: #ffebee;\n        color: #c62828;\n        border-left: 4px solid #c62828;\n    }\n\n    /* Debug info */\n    .debug-info {\n        margin-top: 20px;\n        padding: 10px;\n        background-color: #f8f9fa;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        font-family: monospace;\n        font-size: 12px;\n        white-space: pre-wrap;\n    }\n    \n    /* Custom select styling */\n    select.form-control {\n        appearance: none;\n        background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24'%3E%3Cpath fill='%23424242' d='M7 10l5 5 5-5z'/%3E%3C/svg%3E\");\n        background-repeat: no-repeat;\n        background-position: right 10px center;\n        padding-right: 30px;\n    }\n</style>\n\n<div class=\"editor-container\">\n    <div class=\"editor-header\">\n        <h2 class=\"editor-title\">Todo Item Editor</h2>\n        <p>Edit todo details and save changes to the database</p>\n    </div>\n\n    <div class=\"todo-lookup\">\n        <input type=\"text\" class=\"form-control\" placeholder=\"Enter todo ID to edit\" ng-model=\"todoIdToLookup\" />\n        <button class=\"btn btn-primary\" ng-click=\"send({topic: 'todo/action/edit', payload: {id: todoIdToLookup}})\">\n            <i class=\"fa fa-search btn-icon\"></i> Load Todo\n        </button>\n    </div>\n\n    <div ng-if=\"parsedPayload && parsedPayload.id\" class=\"editor-form\" ng-class=\"{'priority-high': editPriority === 'high', 'priority-medium': editPriority === 'medium', 'priority-low': editPriority === 'low', 'priority-initial': editPriority === 'initial'}\">\n        <div class=\"todo-id-badge\">\n            ID: {{parsedPayload.id}}\n            <span ng-if=\"parsedPayload.status\" class=\"status-badge\" ng-class=\"{'status-pending-badge': parsedPayload.status.toLowerCase() === 'pending', 'status-completed-badge': parsedPayload.status.toLowerCase() === 'completed', 'status-review-badge': parsedPayload.status.toLowerCase() === 'review'}\">\n                {{parsedPayload.status}}\n            </span>\n        </div>\n\n        <div class=\"form-section\">\n            <h3 class=\"form-section-title\">Basic Information</h3>\n\n            <div class=\"form-group\">\n                <label class=\"form-label\">Description</label>\n                <input type=\"text\" class=\"form-control\" ng-model=\"editDescription\" ng-change=\"handleFieldChange('description', editDescription)\" />\n            </div>\n\n            <div class=\"form-row\">\n                <div class=\"form-col\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Priority</label>\n                        <select class=\"form-control\" ng-model=\"editPriority\" ng-change=\"handleFieldChange('priority', editPriority)\">\n                            <option value=\"high\">High</option>\n                            <option value=\"medium\">Medium</option>\n                            <option value=\"low\">Low</option>\n                            <option value=\"initial\">Initial</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div class=\"form-col\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Status</label>\n                        <select class=\"form-control\" ng-model=\"editStatus\" ng-change=\"handleFieldChange('status', editStatus)\">\n                            <option value=\"pending\">Pending</option>\n                            <option value=\"completed\">Completed</option>\n                            <option value=\"review\">Review</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"form-label\">Project</label>\n                <select class=\"form-control\" ng-model=\"editProject\" ng-change=\"handleFieldChange('project', editProject)\">\n                    <option value=\"\">-- Select Project --</option>\n                    <option ng-repeat=\"project in availableProjects\" value=\"{{project}}\">{{project}}</option>\n                </select>\n            </div>\n        </div>\n\n        <div class=\"form-section\">\n            <h3 class=\"form-section-title\">Additional Details</h3>\n\n            <div class=\"form-row\">\n                <div class=\"form-col\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Due Date</label>\n                        <input type=\"date\" class=\"form-control\" ng-model=\"editDueDate\" ng-change=\"handleFieldChange('due_date', editDueDate)\" />\n                    </div>\n                </div>\n\n                <div class=\"form-col\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Duration (minutes)</label>\n                        <input type=\"number\" class=\"form-control\" ng-model=\"editDuration\" ng-change=\"handleFieldChange('duration', editDuration)\" min=\"0\" max=\"480\" />\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"form-label\">Ticket Reference</label>\n                <input type=\"text\" class=\"form-control\" ng-model=\"editTicket\" ng-change=\"handleFieldChange('ticket', editTicket)\" placeholder=\"Enter ticket ID or URL\" />\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"form-label\">Notes</label>\n                <textarea class=\"form-control\" rows=\"4\" ng-model=\"editNotes\" ng-change=\"handleFieldChange('notes', editNotes)\"></textarea>\n            </div>\n        </div>\n\n        <div class=\"form-section\">\n            <h3 class=\"form-section-title\">Enhanced Description</h3>\n            <p class=\"form-section-subtitle\">Use markdown formatting for rich text</p>\n            <div class=\"form-group\">\n                <textarea class=\"form-control enhanced-description\" rows=\"8\" ng-model=\"editEnhancedDescription\" ng-change=\"handleFieldChange('enhanced_description', editEnhancedDescription)\" placeholder=\"Add detailed description with markdown formatting...\"></textarea>\n            </div>\n        </div>\n\n        <div class=\"form-section\" ng-if=\"parsedPayload.created_at || parsedPayload.completed_at\">\n            <h3 class=\"form-section-title\">Timestamps</h3>\n\n            <div class=\"form-row\">\n                <div class=\"form-col\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Created At</label>\n                        <div class=\"timestamp-value\">{{parsedPayload.created_at | date:'MMM d, yyyy h:mm a'}}</div>\n                    </div>\n                </div>\n\n                <div class=\"form-col\" ng-if=\"parsedPayload.completed_at\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Completed At</label>\n                        <div class=\"timestamp-value\">{{parsedPayload.completed_at | date:'MMM d, yyyy h:mm a'}}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"action-buttons\">\n            <button class=\"btn btn-primary\" ng-click=\"saveAllChanges()\">\n                <i class=\"fa fa-save btn-icon\"></i> Save Changes\n            </button>\n\n            <button class=\"btn btn-success\" ng-click=\"updateTodoField('status', 'completed')\" ng-if=\"editStatus !== 'completed'\">\n                <i class=\"fa fa-check-circle btn-icon\"></i> Mark Completed\n            </button>\n            \n            <button class=\"btn btn-purple\" ng-click=\"updateTodoField('status', 'review')\" ng-if=\"editStatus !== 'review'\">\n                <i class=\"fa fa-eye btn-icon\"></i> Mark for Review\n            </button>\n\n            <button class=\"btn btn-danger\" ng-click=\"send({topic: 'todo/action/delete', payload: {id: parsedPayload.id}})\">\n                <i class=\"fa fa-trash btn-icon\"></i> Delete Todo\n            </button>\n        </div>\n\n        <div ng-if=\"updateStatus\" class=\"update-status {{updateStatus.type}}\">\n            {{updateStatus.message}}\n        </div>\n    </div>\n\n    <div ng-if=\"!parsedPayload || !parsedPayload.id\" class=\"empty-state\">\n        <i class=\"fa fa-edit\" style=\"font-size: 48px; margin-bottom: 16px; color: #1a237e;\"></i>\n        <h3>No Todo Selected</h3>\n        <p>Enter a todo ID above to load and edit a todo item</p>\n    </div>\n\n    <!-- Debug section to help troubleshoot data flow (uncomment when needed) -->\n    <!-- \n    <div class=\"debug-info\">\n        <div>Topic: {{msg.topic}}</div>\n        <div>Raw Payload: {{JSON.stringify(msg.payload)}}</div>\n        <div>Current Todo ID: {{parsedPayload.id || 'None'}}</div>\n        <div ng-if=\"originalTodo\">Original Todo: {{JSON.stringify(originalTodo)}}</div>\n        <div ng-if=\"updateStatus\">Status: {{updateStatus.type}} - {{updateStatus.message}}</div>\n    </div>\n    -->\n</div>\n\n<!--\nNode-RED Message Format (example response):\n{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"description\": \"Prepare weekly report\",\n  \"priority\": \"high\",\n  \"status\": \"pending\",\n  \"created_at\": 1682424116000,\n  \"due_date\": \"2023-05-20\",\n  \"duration_minutes\": 60,\n  \"notes\": \"Include last week's metrics and forecasts\"\n}\n-->\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 1100,
        "wires": [
            [
                "aa3c19870a047f03"
            ]
        ]
    },
    {
        "id": "98c0aca7ec2161cc",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "ListActions",
        "func": "const action = msg.payload.action;\nconst todoId = msg.payload.id;\n\nlet topic = '';\nlet newMsg = { payload: {} };\n\n// Handle direct topic if already set (from copyToClipboard function)\nif (msg.topic === 'todo/action/edit') {\n    // Pass through the message but add a special flag to prevent refresh\n    msg.noRefresh = true;\n    msg.directEdit = true;\n    return msg;\n}\n\nswitch(action) {\n    case 'complete':\n        topic = 'todo/action/complete';\n        newMsg.payload = { id: todoId };\n        break;\n    case 'suggestions':\n        topic = 'todo/action/get_todo_for_insights';\n        newMsg.payload = { id: todoId };\n        break;\n    case 'schedule':\n        topic = 'todo/action/schedule';\n        newMsg.payload = { id: todoId };\n        break;\n    case 'copy_id':\n        return msg;\n    default:\n        return null;\n}\n\nnewMsg.topic = topic;\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "331cb971cae4185d"
            ]
        ]
    },
    {
        "id": "aa3c19870a047f03",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "EditActions",
        "func": "// Function to handle actions from the Todo Item Editor\n// This enables routing events from the editor to the correct MongoDB operations\n\n// Extract action type and todo ID from the incoming message\nconst topic = msg.topic || '';\nconst payload = msg.payload || {};\n\n// If this isn't an editor action, pass through\nif (!topic.startsWith('todo/action/'))\n{\n    return msg;\n}\n\n// Extract the specific action from the topic\nconst action = topic.replace('todo/action/', '');\nconst todoId = payload.id;\n\n// Add debug info\nnode.warn(`EditActions received ${action} action with payload: ${JSON.stringify(payload)}`);\n\n// Validate todo ID for most actions\nif (!todoId && action !== 'refresh_todos' && action !== 'refresh_suggestions' && action !== 'daily_schedule' && action !== 'copy_id')\n{\n    node.warn(`Error: No todo ID provided for ${action} action`);\n    return {\n        payload: {\n            status: \"error\",\n            message: \"No todo ID provided for \" + action + \" action\"\n        },\n        topic: \"todo/dashboard/editor\"\n    };\n}\n\n// Route the message based on the action\nswitch (action)\n{\n    case 'update':\n        // Single field update\n        if (!payload.field || payload.value === undefined)\n        {\n            node.warn(`Error: Field name or value missing for update action`);\n            return {\n                payload: {\n                    status: \"error\",\n                    message: \"Field name or value missing for update\"\n                },\n                topic: \"todo/dashboard/editor\"\n            };\n        }\n\n        node.warn(`Routing update for field: ${payload.field}, value: ${payload.value}`);\n        // Pass through with topic preserved\n        return msg;\n\n    case 'update_multiple':\n        // Multiple field update\n        if (!payload.updates || Object.keys(payload.updates).length === 0)\n        {\n            node.warn(`Error: No updates provided for update_multiple action`);\n            return {\n                payload: {\n                    status: \"error\",\n                    message: \"No updates provided for update_multiple\"\n                },\n                topic: \"todo/dashboard/editor\"\n            };\n        }\n\n        // Log the updates for debugging\n        node.warn(\"Processing update_multiple with updates: \" + JSON.stringify(payload.updates));\n\n        // Clean any empty updates\n        const updates = payload.updates;\n        let hasRealUpdates = false;\n\n        // Check if any of the updates contain non-empty values\n        Object.keys(updates).forEach(key =>\n        {\n            const value = updates[key];\n            if (value !== null && value !== undefined && value !== '')\n            {\n                hasRealUpdates = true;\n            }\n        });\n\n        // If all updates are empty strings or null/undefined, warn and pass through\n        if (!hasRealUpdates)\n        {\n            node.warn(\"Warning: All update values are empty, but proceeding anyway\");\n        }\n\n        // Pass through with topic preserved\n        return msg;\n\n    case 'delete':\n        // Todo deletion\n        node.warn(`Routing delete action for todo ID: ${todoId}`);\n        // Pass through with topic preserved\n        return msg;\n\n    case 'edit':\n        // Load todo for editing\n        node.warn(`Routing edit action for todo ID: ${todoId}`);\n        // Pass through with topic preserved\n        return msg;\n\n    case 'complete':\n        // Mark todo as complete\n        node.warn(`Routing complete action for todo ID: ${todoId}`);\n        // Pass through with topic preserved\n        return msg;\n\n    case 'copy_id':\n        // Copy todo ID to clipboard\n        node.warn(`Routing copy_id action for todo ID: ${todoId}`);\n        // Pass through with topic preserved\n        return msg;\n\n    default:\n        // Unknown action\n        node.warn(`Error: Unknown editor action: ${action}`);\n        return {\n            payload: {\n                status: \"error\",\n                message: \"Unknown editor action: \" + action\n            },\n            topic: \"todo/dashboard/editor\"\n        };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1100,
        "wires": [
            [
                "3b8a43150f8ef5db"
            ]
        ]
    },
    {
        "id": "31514c435b15540f",
        "type": "link in",
        "z": "e890cb64b583ae67",
        "g": "7f3d19dc6b21c563",
        "name": "editor-only-link",
        "links": [
            "f1357f1ec38dd4c9"
        ],
        "x": 455,
        "y": 1140,
        "wires": [
            [
                "9a892952c84e8362"
            ]
        ]
    },
    {
        "id": "8e4883248d3f6123",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "6b213e2487e72b2d",
        "name": "clear-filters",
        "func": "// This function clears all filter settings\n// and initiates a refresh of the todo list\n\n// Reset all filters in global context\nglobal.set(\"projectFilter\", \"all\");\nglobal.set(\"statusFilter\", \"all\");\nglobal.set(\"priorityFilter\", \"all\");\nglobal.set(\"dateFilter\", null);\n\n// Log what we're doing\nnode.warn(\"Clearing all filter settings\");\n\n// Return message to refresh the todo list with no filters\nreturn {\n    topic: \"todo/action/refresh_todos\",\n    payload: {\n        refreshType: \"clear_filters\",\n        clear_filters: true\n    }\n}; \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 820,
        "wires": [
            [
                "3c68bf135c197c23"
            ]
        ]
    },
    {
        "id": "193dacde143c7c0b",
        "type": "function",
        "z": "e890cb64b583ae67",
        "name": "create-todo",
        "func": "// This function prepares a blank todo template\n// for the editor to create a new todo\n\n// Get current timestamp\nconst now = Math.floor(Date.now() / 1000);\n\n// Get project from filter if available\nconst projectFilter = global.get(\"projectFilter\") || \"all\";\nconst defaultProject = projectFilter !== \"all\" ? projectFilter : \"\";\n\n// Generate a unique ID for the new todo\nconst generateUUID = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = Math.random() * 16 | 0;\n        const v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n};\n\n// Create a blank todo template\nconst newTodo = {\n    id: generateUUID(),\n    description: \"\",\n    priority: \"initial\",\n    status: \"pending\",\n    project: defaultProject,\n    created_at: now,\n    last_modified: now,\n    notes: \"\",\n    enhanced_description: \"\"\n};\n\n// Pass the new todo to the editor\nreturn {\n    payload: newTodo,\n    topic: \"todo/dashboard/editor\",\n    isNewTodo: true\n}; \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 940,
        "wires": [
            [
                "269581e68f7b96f8"
            ]
        ]
    },
    {
        "id": "fc1ec21245012ff3",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "6b213e2487e72b2d",
        "name": "filter-date",
        "func": "// This function processes the date filter selection\n// and initiates a refresh of the todo list\n\n// Extract date from payload - could be Date object or string\nlet dateValue = msg.payload.date || null;\n\n// Try to ensure we have a valid date format\nif (dateValue) {\n    try {\n        // If it's already a Date object, convert to ISO string\n        if (dateValue instanceof Date) {\n            dateValue = dateValue.toISOString().split('T')[0]; // YYYY-MM-DD format\n        } else if (typeof dateValue === 'string') {\n            // Parse string to Date object and back to standardized format\n            const parsedDate = new Date(dateValue);\n            if (!isNaN(parsedDate.getTime())) { // Check if valid date\n                dateValue = parsedDate.toISOString().split('T')[0]; // YYYY-MM-DD format\n            } else {\n                node.warn(\"Invalid date format provided: \" + dateValue);\n                dateValue = null;\n            }\n        } else {\n            node.warn(\"Unsupported date format provided\");\n            dateValue = null;\n        }\n    } catch (error) {\n        node.warn(\"Error processing date: \" + error.message);\n        dateValue = null;\n    }\n}\n\n// Store in global context for use by other nodes\nglobal.set(\"dateFilter\", dateValue);\n\n// Log what we're doing\nnode.warn(\"Setting date filter to: \" + (dateValue || \"none\"));\n\n// Return message to refresh the todo list with new filter\nreturn {\n    topic: \"todo/action/refresh_todos\",\n    payload: {\n        refreshType: \"date_filter\",\n        date: dateValue\n    }\n}; \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 780,
        "wires": [
            [
                "3c68bf135c197c23"
            ]
        ]
    },
    {
        "id": "7a7df2902036d9b6",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "6b213e2487e72b2d",
        "name": "filter-priority",
        "func": "// This function processes the priority filter selection\n// and initiates a refresh of the todo list\n\n// Extract priority from payload\nconst priority = msg.payload.priority || \"all\";\n\n// Store in global context for use by other nodes\nglobal.set(\"priorityFilter\", priority);\n\n// Log what we're doing\nnode.warn(\"Setting priority filter to: \" + priority);\n\n// Return message to refresh the todo list with new filter\nreturn {\n    topic: \"todo/action/refresh_todos\",\n    payload: {\n        refreshType: \"priority_filter\",\n        priority: priority\n    }\n}; \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 740,
        "wires": [
            [
                "3c68bf135c197c23"
            ]
        ]
    },
    {
        "id": "22ac9e90c38881a6",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "6b213e2487e72b2d",
        "name": "filter-status",
        "func": "// This function processes the status filter selection\n// and initiates a refresh of the todo list\n\n// Extract status from payload\nconst status = msg.payload.status || \"all\";\n\n// Store in global context for use by other nodes\nglobal.set(\"statusFilter\", status);\n\n// Log what we're doing\nnode.warn(\"Setting status filter to: \" + status);\n\n// Return message to refresh the todo list with new filter\nreturn {\n    topic: \"todo/action/refresh_todos\",\n    payload: {\n        refreshType: \"status_filter\",\n        status: status\n    }\n}; \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 700,
        "wires": [
            [
                "3c68bf135c197c23"
            ]
        ]
    },
    {
        "id": "c843d2925e0307cb",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "name": "Insights-pub",
        "mode": "link",
        "links": [
            "c57d98e84ba3bf45",
            "064dba3c02da8301"
        ],
        "x": 205,
        "y": 380,
        "wires": []
    },
    {
        "id": "c57d98e84ba3bf45",
        "type": "link in",
        "z": "e890cb64b583ae67",
        "g": "e4a65e9fb61229b9",
        "name": "insights-sub",
        "links": [
            "c843d2925e0307cb"
        ],
        "x": 685,
        "y": 840,
        "wires": [
            [
                "b446d06b5fa4c934"
            ]
        ]
    },
    {
        "id": "269581e68f7b96f8",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "name": "dashboard-pub",
        "mode": "link",
        "links": [
            "8d670b8299f89a5b",
            "9348ae0a3e0c29ad"
        ],
        "x": 440,
        "y": 940,
        "wires": [],
        "l": true
    },
    {
        "id": "3c68bf135c197c23",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "6b213e2487e72b2d",
        "name": "action-pub",
        "mode": "link",
        "links": [
            "af45aadd044350e0",
            "b9cdbb33dfe0a2cd"
        ],
        "x": 490,
        "y": 760,
        "wires": [],
        "l": true
    },
    {
        "id": "1fe49cdff51929f8",
        "type": "http in",
        "z": "e890cb64b583ae67",
        "g": "794ccfcc603b4175",
        "name": "Todo API Endpoint",
        "url": "/api/todos",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1270,
        "y": 1380,
        "wires": [
            [
                "1519217d0439bde3"
            ]
        ]
    },
    {
        "id": "1519217d0439bde3",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "794ccfcc603b4175",
        "name": "Process API Request",
        "func": "// Process the HTTP request for todos\n// Handle filtering, pagination, and sorting\n\n// Extract query parameters\nconst query = msg.req.query || {};\nconst projectFilter = query.project || \"all\";\nconst statusFilter = query.status || \"all\";\nconst priorityFilter = query.priority || \"all\";\nconst dateFilter = query.date || null;\n\n// Store the current filters in global context for UI feedback\nglobal.set(\"projectFilter\", projectFilter);\nglobal.set(\"statusFilter\", statusFilter);\nglobal.set(\"priorityFilter\", priorityFilter);\nglobal.set(\"dateFilter\", dateFilter);\n\n// Build the MongoDB query\nlet match = {};\n\n// Apply project filter\nif (projectFilter !== \"all\") {\n    match.project = projectFilter;\n}\n\n// Apply status filter\nif (statusFilter === \"all\") {\n    // Default to show non-completed items unless specifically requested\n    match.status = { $ne: \"completed\" };\n} else {\n    match.status = statusFilter;\n}\n\n// Apply priority filter\nif (priorityFilter !== \"all\") {\n    match.priority = priorityFilter;\n}\n\n// Apply date filter\nif (dateFilter) {\n    try {\n        const date = new Date(dateFilter);\n        \n        if (!isNaN(date.getTime())) {\n            const dateStr = date.toISOString().split('T')[0]; // YYYY-MM-DD format\n            \n            // Create a range for the entire day\n            const startDate = new Date(dateStr + \"T00:00:00.000Z\");\n            const endDate = new Date(dateStr + \"T23:59:59.999Z\");\n            \n            // Add date filter to match stage\n            match.due_date = {\n                $gte: Math.floor(startDate.getTime() / 1000),\n                $lte: Math.floor(endDate.getTime() / 1000)\n            };\n        }\n    } catch (err) {\n        node.warn(\"Error parsing date filter: \" + err.message);\n    }\n}\n\n// Set the sort order\nconst sort = { priority: 1, created_at: -1 };\n\n// Build the aggregation pipeline\nconst pipeline = [\n    { $match: match },\n    { $sort: sort },\n    { $limit: 200 },\n    {\n        $project: {\n            _id: 0,\n            id: \"$id\",\n            todo_id: \"$id\",\n            description: 1,\n            priority: 1,\n            status: 1,\n            created_at: 1,\n            duration_minutes: {\n                $switch: {\n                    branches: [\n                        { case: { $eq: [\"$priority\", \"high\"] }, then: 60 },\n                        { case: { $eq: [\"$priority\", \"medium\"] }, then: 45 },\n                        { case: { $eq: [\"$priority\", \"initial\"] }, then: 45 }\n                    ],\n                    default: 30\n                }\n            },\n            project: 1,\n            due_date: 1,\n            notes: 1,\n            enhanced_description: 1,\n            ticket: 1,\n            completed_at: 1,\n            last_modified: 1\n        }\n    }\n];\n\n// Set up MongoDB query parameters\nmsg.collection = \"todos\";\nmsg.operation = \"aggregate\";\nmsg.payload = [pipeline];\n\n// Add metadata for response processing\nmsg._filters = {\n    project: projectFilter,\n    status: statusFilter,\n    priority: priorityFilter,\n    date: dateFilter\n};\n\n// Send to MongoDB for query\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1380,
        "wires": [
            [
                "c9dbd8229cab6689"
            ]
        ]
    },
    {
        "id": "c9dbd8229cab6689",
        "type": "mongodb4",
        "z": "e890cb64b583ae67",
        "g": "794ccfcc603b4175",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "Query Todos",
        "x": 1670,
        "y": 1380,
        "wires": [
            [
                "f52ad2a536fccf6b"
            ]
        ]
    },
    {
        "id": "9cccbd48e8fa8e77",
        "type": "catch",
        "z": "e890cb64b583ae67",
        "g": "794ccfcc603b4175",
        "name": "Handle API Errors",
        "scope": [
            "f52ad2a536fccf6b"
        ],
        "uncaught": false,
        "x": 1290,
        "y": 1440,
        "wires": [
            [
                "a4cbeef4cd755121"
            ]
        ]
    },
    {
        "id": "5e0116f6d8d8002b",
        "type": "http response",
        "z": "e890cb64b583ae67",
        "g": "794ccfcc603b4175",
        "name": "Send API Response",
        "statusCode": "200",
        "headers": {},
        "x": 2080,
        "y": 1360,
        "wires": []
    },
    {
        "id": "3f697a46e675ce15",
        "type": "mqtt out",
        "z": "e890cb64b583ae67",
        "g": "794ccfcc603b4175",
        "name": "Publish Status",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5b41a831.e6efd8",
        "x": 2100,
        "y": 1420,
        "wires": []
    },
    {
        "id": "a4cbeef4cd755121",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "794ccfcc603b4175",
        "name": "Format Error Response",
        "func": "// Format error response for API\nlet error = msg.error || {};\n\n// Create the error response\nconst errorResponse = {\n    error: true,\n    message: error.message || \"An unknown error occurred\",\n    code: error.code || 500\n};\n\n// Log the error\nnode.error(`API Error: ${errorResponse.message}`, error);\n\n// Set the HTTP response\nmsg.payload = errorResponse;\nmsg.statusCode = errorResponse.code || 500;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1440,
        "wires": [
            [
                "3c7fdc8f0af1dcf2",
                "84617b7d978ce745"
            ]
        ]
    },
    {
        "id": "991ed2db9a6f7277",
        "type": "ui_button",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "name": "Show All Projects",
        "group": "g-todos",
        "order": 16,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "All Projects",
        "tooltip": "Show todos from all projects",
        "color": "#fff85e",
        "bgcolor": "#1976d2",
        "className": "",
        "icon": "list",
        "payload": "{\"project\":\"all\"}",
        "payloadType": "json",
        "topic": "todo/filter/project",
        "topicType": "str",
        "x": 1110,
        "y": 1160,
        "wires": [
            [
                "fab1fa0c60a9a9b2"
            ]
        ]
    },
    {
        "id": "ff670acf633ea8e5",
        "type": "ui_dropdown",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "name": "Project Filter",
        "label": "Filter by Project",
        "tooltip": "Filter todos by project",
        "place": "Select project or 'All'",
        "group": "g-todos",
        "order": 17,
        "width": 12,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "All Projects",
                "value": "all",
                "type": "str"
            },
            {
                "label": "regressiontestkit",
                "value": "regressiontestkit",
                "type": "str"
            },
            {
                "label": "madness_interactive",
                "value": "madness_interactive",
                "type": "str"
            },
            {
                "label": "omnispindle",
                "value": "omnispindle",
                "type": "str"
            },
            {
                "label": "swarmonomicon",
                "value": "swarmonomicon",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "project",
        "topicType": "str",
        "className": "",
        "x": 1090,
        "y": 1120,
        "wires": [
            [
                "4caa598c867dcbd7"
            ]
        ]
    },
    {
        "id": "3cad658afb5da2b7",
        "type": "ui_button",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "name": "Clear Filters",
        "group": "g-todos",
        "order": 15,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Clear Filters",
        "tooltip": "Reset all filters to default",
        "color": "#fff85e",
        "bgcolor": "#f44336",
        "className": "",
        "icon": "fa-filter-circle-xmark",
        "payload": "{\"clear\":true}",
        "payloadType": "json",
        "topic": "todo/filter/clear",
        "topicType": "str",
        "x": 1090,
        "y": 1200,
        "wires": [
            [
                "4b28253c090e66bd"
            ]
        ]
    },
    {
        "id": "24f4c6037e257e6f",
        "type": "ui_button",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "name": "Refresh Todos",
        "group": "g-todos",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Refresh List",
        "tooltip": "Refresh the Todo List items",
        "color": "#fff85e",
        "bgcolor": "#4caf50",
        "className": "",
        "icon": "refresh",
        "payload": "1",
        "payloadType": "json",
        "topic": "todo/action/refresh",
        "topicType": "str",
        "x": 1100,
        "y": 1080,
        "wires": [
            [
                "fab1fa0c60a9a9b2"
            ]
        ]
    },
    {
        "id": "77420d7e7aceb49f",
        "type": "ui_text",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "group": "g-todos",
        "order": 18,
        "width": 12,
        "height": 1,
        "name": "Status Display",
        "label": "Status:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1880,
        "y": 1200,
        "wires": []
    },
    {
        "id": "fab1fa0c60a9a9b2",
        "type": "http request",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "name": "Request Filtered Todos",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://localhost:9191/api/todos",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1530,
        "y": 1160,
        "wires": [
            [
                "5eea9c0d47d50a15"
            ]
        ]
    },
    {
        "id": "4caa598c867dcbd7",
        "type": "function",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "name": "Handle Project Selection",
        "func": "// Format project filter selection for HTTP request\nconst project = msg.payload || \"all\";\n\n// Return formatted message for HTTP request\nreturn {\n    payload: {\n        project: project\n    }\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1120,
        "wires": [
            [
                "fab1fa0c60a9a9b2"
            ]
        ]
    },
    {
        "id": "8fb4d9d93948e07c",
        "type": "function",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "name": "Handle Date Selection",
        "func": "// Format date filter for HTTP request\nlet dateValue = msg.payload || null;\n\n// Return formatted message for HTTP request\nreturn {\n    payload: {\n        date: dateValue\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1240,
        "wires": [
            [
                "fab1fa0c60a9a9b2"
            ]
        ]
    },
    {
        "id": "4b28253c090e66bd",
        "type": "function",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "name": "Clear All Filters",
        "func": "// Reset all filters\nreturn {\n    payload: {\n        project: \"all\",\n        status: \"all\",\n        priority: \"all\",\n        date: null\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1200,
        "wires": [
            [
                "fab1fa0c60a9a9b2"
            ]
        ]
    },
    {
        "id": "5eea9c0d47d50a15",
        "type": "function",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "name": "Process API Response",
        "func": "// Process the todo list API response\nconst response = msg.payload || {};\nconst data = response.data || [];\nconst meta = response.meta || {};\n\n// Update display with count and filter info\nlet displayMsg = { payload: `Found ${data.length} todos` };\nif (meta.filters) {\n    const filterNames = [];\n    if (meta.filters.project !== \"all\") filterNames.push(`Project: ${meta.filters.project}`);\n    if (meta.filters.status !== \"all\") filterNames.push(`Status: ${meta.filters.status}`);\n    if (meta.filters.priority !== \"all\") filterNames.push(`Priority: ${meta.filters.priority}`);\n    if (meta.filters.date) filterNames.push(`Date: ${meta.filters.date}`);\n    \n    if (filterNames.length > 0) {\n        displayMsg.payload += ` (Filtered by ${filterNames.join(\", \")})`;\n    }\n}\n\n// Send todo data to the dashboard\nreturn [\n    // First output: Todo data for dashboard\n    {\n        topic: \"todo/list/data\",\n        payload: data\n    },\n    // Second output: Status display\n    displayMsg\n];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1160,
        "wires": [
            [
                "15023bdcd355fbf3"
            ],
            [
                "77420d7e7aceb49f"
            ]
        ]
    },
    {
        "id": "15023bdcd355fbf3",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "bf8d124af1bd5874",
        "name": "To Todo List",
        "mode": "link",
        "links": [
            "8d670b8299f89a5b",
            "9348ae0a3e0c29ad"
        ],
        "x": 1895,
        "y": 1120,
        "wires": []
    },
    {
        "id": "3c7fdc8f0af1dcf2",
        "type": "debug",
        "z": "e890cb64b583ae67",
        "g": "794ccfcc603b4175",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 1420,
        "wires": []
    },
    {
        "id": "21670d9ec4b93356",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "action-pub",
        "mode": "link",
        "links": [
            "af45aadd044350e0",
            "b9cdbb33dfe0a2cd"
        ],
        "x": 2195,
        "y": 540,
        "wires": []
    },
    {
        "id": "af49098fc8fec1b0",
        "type": "ui_text",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "group": "g-todos",
        "order": 9,
        "width": 8,
        "height": 2,
        "name": "Sync Status",
        "label": "Status:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 2195,
        "y": 580,
        "wires": [],
        "l": false
    },
    {
        "id": "d1e3061449f916c5",
        "type": "ui_button",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "Clear Filters",
        "group": "g-todos",
        "order": 12,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Clear Filters",
        "tooltip": "Reset all filters to default",
        "color": "#fff85e",
        "bgcolor": "#f44336",
        "className": "",
        "icon": "fa-filter-circle-xmark",
        "payload": "clear",
        "payloadType": "str",
        "topic": "todo/action/clear_filters",
        "topicType": "str",
        "x": 1730,
        "y": 620,
        "wires": [
            [
                "7536a291bec6ea6b"
            ]
        ]
    },
    {
        "id": "9e852016adc42f2c",
        "type": "ui_button",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "Create Todo",
        "group": "g-todos",
        "order": 16,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "New Todo",
        "tooltip": "Create a new Todo item",
        "color": "#ffffff",
        "bgcolor": "#673ab7",
        "className": "",
        "icon": "fa-plus-circle",
        "payload": "new",
        "payloadType": "str",
        "topic": "todo/action/create",
        "topicType": "str",
        "x": 1710,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "63b6d78efd2d69ed",
        "type": "link out",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "action-pub",
        "mode": "link",
        "links": [
            "af45aadd044350e0",
            "b9cdbb33dfe0a2cd"
        ],
        "x": 1855,
        "y": 440,
        "wires": []
    },
    {
        "id": "32cd8d01e43332f3",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "route-project-filter",
        "func": "// Check if payload is a project name or 'all'\nlet projectFilter = 'all';\n\nif (msg.payload && msg.payload !== 'all') {\n    projectFilter = msg.payload;\n}\n\nreturn {\n    topic: 'todo/action/filter_project',\n    payload: {\n        project: projectFilter\n    }\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 520,
        "wires": [
            [
                "91c9dd4bf96e77d7"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "e5802fb8bb1f5382",
        "type": "ui_button",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "Refresh Todos",
        "group": "g-todos",
        "order": 13,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Refresh List",
        "tooltip": "Refresh the Todo List items",
        "color": "#fff85e",
        "bgcolor": "#4caf50",
        "className": "",
        "icon": "refresh",
        "payload": "1",
        "payloadType": "str",
        "topic": "todo/action/refresh_todos",
        "topicType": "str",
        "x": 1720,
        "y": 460,
        "wires": [
            [
                "63b6d78efd2d69ed"
            ]
        ]
    },
    {
        "id": "334f7f100e16ca49",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "route-date-filter",
        "func": "// Process date filter selection\nconst dateValue = msg.payload;\n\nreturn {\n    topic: 'todo/action/filter_date',\n    payload: {\n        date: dateValue\n    }\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 560,
        "wires": [
            [
                "91c9dd4bf96e77d7"
            ]
        ]
    },
    {
        "id": "7536a291bec6ea6b",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "clear-all-filters",
        "func": "// Clear all filters function replaced by central handler\nreturn {\n    topic: 'todo/action/clear_filters',\n    payload: {\n        clear_filters: true\n    }\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 600,
        "wires": [
            [
                "91c9dd4bf96e77d7"
            ]
        ]
    },
    {
        "id": "8a9417e81c6e8a97",
        "type": "ui_button",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "Show All",
        "group": "g-todos",
        "order": 18,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "All Projects",
        "tooltip": "Show todos from all projects",
        "color": "#fff85e",
        "bgcolor": "#1976d2",
        "className": "",
        "icon": "list",
        "payload": "all",
        "payloadType": "str",
        "topic": "todo/action/filter_project",
        "topicType": "str",
        "x": 1740,
        "y": 500,
        "wires": [
            [
                "32cd8d01e43332f3"
            ]
        ]
    },
    {
        "id": "9ea558fe7c273114",
        "type": "ui_dropdown",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "ProjectSelect",
        "label": "Filter by Project",
        "tooltip": "Filter todos by project",
        "place": "Select project or 'All'",
        "group": "g-todos",
        "order": 17,
        "width": 12,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "All Projects",
                "value": "all",
                "type": "str"
            },
            {
                "label": "regressiontestkit",
                "value": "regressiontestkit",
                "type": "str"
            },
            {
                "label": "madness_interactive",
                "value": "madness_interactive",
                "type": "str"
            },
            {
                "label": "omnispindle",
                "value": "omnispindle",
                "type": "str"
            },
            {
                "label": "swarmonomicon",
                "value": "swarmonomicon",
                "type": "str"
            },
            {
                "label": "balena_device_management",
                "value": "balena_device_management",
                "type": "str"
            },
            {
                "label": "cogwyrm",
                "value": "cogwyrm",
                "type": "str"
            },
            {
                "label": "docker_implementation",
                "value": "docker_implementation",
                "type": "str"
            },
            {
                "label": "documentation",
                "value": "documentation",
                "type": "str"
            },
            {
                "label": "eventghost-rust",
                "value": "eventghost-rust",
                "type": "str"
            },
            {
                "label": "fastmcp",
                "value": "fastmcp",
                "type": "str"
            },
            {
                "label": "hammerghost",
                "value": "hammerghost",
                "type": "str"
            },
            {
                "label": "hammerspoon",
                "value": "hammerspoon",
                "type": "str"
            },
            {
                "label": "quality_assurance",
                "value": "quality_assurance",
                "type": "str"
            },
            {
                "label": "spindlewrit",
                "value": "spindlewrit",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1730,
        "y": 540,
        "wires": [
            [
                "32cd8d01e43332f3"
            ]
        ]
    },
    {
        "id": "2bc85dd65afdc4eb",
        "type": "ui_date_picker",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "Due Date Filter",
        "label": "Due Date",
        "group": "g-todos",
        "order": 10,
        "width": 8,
        "height": 2,
        "passthru": true,
        "topic": "todo/filter/date",
        "topicType": "str",
        "className": "",
        "x": 1720,
        "y": 580,
        "wires": [
            [
                "334f7f100e16ca49"
            ]
        ]
    },
    {
        "id": "91c9dd4bf96e77d7",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "Central Filter",
        "func": "// This function serves as a central handler for all filter changes\n// and ensures the todo list is refreshed when any filter is changed\n\n// Get the current topic and payload\nconst topic = msg.topic || \"\";\nconst payload = msg.payload || {};\n\n// Handle different filter types based on the topic\nif (topic.includes(\"filter_project\")) {\n    // Handle project filter updates\n    const project = payload.project || \"all\";\n    global.set(\"projectFilter\", project);\n    node.warn(\"Project filter set to: \" + project);\n}\nelse if (topic.includes(\"filter_status\")) {\n    // Handle status filter updates\n    const status = payload.status || \"all\";\n    global.set(\"statusFilter\", status);\n    node.warn(\"Status filter set to: \" + status);\n}\nelse if (topic.includes(\"filter_priority\")) {\n    // Handle priority filter updates\n    const priority = payload.priority || \"all\";\n    global.set(\"priorityFilter\", priority);\n    node.warn(\"Priority filter set to: \" + priority);\n}\nelse if (topic.includes(\"filter_date\")) {\n    // Handle date filter updates\n    const date = payload.date || null;\n    global.set(\"dateFilter\", date);\n    node.warn(\"Date filter set to: \" + (date ? new Date(date).toISOString().split('T')[0] : \"none\"));\n}\nelse if (topic.includes(\"clear_filters\")) {\n    // Handle clearing all filters\n    global.set(\"projectFilter\", \"all\");\n    global.set(\"statusFilter\", \"all\");\n    global.set(\"priorityFilter\", \"all\");\n    global.set(\"dateFilter\", null);\n    node.warn(\"All filters cleared\");\n}\n\n// Publish a status update\nconst activeFilters = [];\nif (global.get(\"projectFilter\") !== \"all\") activeFilters.push(\"Project: \" + global.get(\"projectFilter\"));\nif (global.get(\"statusFilter\") !== \"all\") activeFilters.push(\"Status: \" + global.get(\"statusFilter\"));\nif (global.get(\"priorityFilter\") !== \"all\") activeFilters.push(\"Priority: \" + global.get(\"priorityFilter\"));\nif (global.get(\"dateFilter\")) activeFilters.push(\"Date: \" + new Date(global.get(\"dateFilter\")).toLocaleDateString());\n\n// Create a status message\nlet statusMsg = { payload: activeFilters.length > 0 ? \n    \"Filtered by \" + activeFilters.join(\", \") : \n    \"Showing all items\" };\n\n// Return messages\nreturn [\n    // Output 1: Message to trigger todo list refresh\n    {\n        topic: \"todo/action/refresh_todos\",\n        payload: {\n            refreshType: \"filter_change\",\n            filters: {\n                project: global.get(\"projectFilter\"),\n                status: global.get(\"statusFilter\"),\n                priority: global.get(\"priorityFilter\"),\n                date: global.get(\"dateFilter\")\n            }\n        }\n    },\n    // Output 2: Status update for display\n    statusMsg\n];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 560,
        "wires": [
            [
                "21670d9ec4b93356"
            ],
            [
                "af49098fc8fec1b0"
            ]
        ]
    },
    {
        "id": "f52ad2a536fccf6b",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "794ccfcc603b4175",
        "name": "Format API Response",
        "func": "// Format the response for the HTTP API\n\n// Get filter information from the message\nconst filters = msg._filters || {};\n\n// Prepare response metadata\nconst meta = {\n    count: msg.payload.length,\n    filters: filters,\n    timestamp: new Date().toISOString()\n};\n\n// Filter names for display\nconst filterNames = [];\nif (filters.project !== \"all\") filterNames.push(`Project: ${filters.project}`);\nif (filters.status !== \"all\") filterNames.push(`Status: ${filters.status}`);\nif (filters.priority !== \"all\") filterNames.push(`Priority: ${filters.priority}`);\nif (filters.date) filterNames.push(`Date: ${filters.date}`);\n\n// Format filter text for display\nconst filterText = filterNames.length > 0 ?\n    `Filtered by ${filterNames.join(\", \")}` :\n    \"Showing all items\";\n\n// Return messages for HTTP response and MQTT status\nreturn [\n    // First output: HTTP response\n    {\n        payload: {\n            data: msg.payload,\n            meta: meta\n        }\n    },\n    // Second output: MQTT status message\n    {\n        payload: filterText,\n        topic: \"todo/sync/status\"\n    }\n];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1380,
        "wires": [
            [
                "5e0116f6d8d8002b",
                "3c7fdc8f0af1dcf2"
            ],
            [
                "3f697a46e675ce15"
            ]
        ]
    },
    {
        "id": "84617b7d978ce745",
        "type": "http response",
        "z": "e890cb64b583ae67",
        "g": "794ccfcc603b4175",
        "name": "Send API Response",
        "statusCode": "500",
        "headers": {},
        "x": 1740,
        "y": 1460,
        "wires": []
    },
    {
        "id": "2fd455fef50050a9",
        "type": "inject",
        "z": "e890cb64b583ae67",
        "g": "fa491c95f3f4ac79",
        "name": "Project Options Inject",
        "props": [
            {
                "p": "options",
                "v": "[\"All Projects\",\"regressiontestkit\",\"madness_interactive\",\"omnispindle\",\"swarmonomicon\",\"balena_device_management\",\"cogwyrm\",\"docker_implementation\",\"documentation\",\"eventghost-rust\",\"fastmcp\",\"hammerghost\",\"hammerspoon\",\"quality_assurance\",\"inventorium\",\"spindlewrit\"]",
                "vt": "json"
            },
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "project_options",
        "payload": "",
        "payloadType": "date",
        "x": 1520,
        "y": 540,
        "wires": [
            [
                "9ea558fe7c273114"
            ]
        ]
    },
    {
        "id": "064dba3c02da8301",
        "type": "link in",
        "z": "e890cb64b583ae67",
        "g": "814deb560dd80e77",
        "name": "insights-pub-debug",
        "links": [
            "c843d2925e0307cb"
        ],
        "x": 1485,
        "y": 260,
        "wires": [
            [
                "e0748fc86717ef67"
            ]
        ]
    },
    {
        "id": "e0748fc86717ef67",
        "type": "debug",
        "z": "e890cb64b583ae67",
        "g": "814deb560dd80e77",
        "name": "insights-debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1595,
        "y": 260,
        "wires": [],
        "l": false
    },
    {
        "id": "3cbf884ecef064d0",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "b00e1184cd8b1e60",
        "name": "Process Log Message",
        "func": "// Process incoming log messages\n// This function now processes messages either from the API or direct calls\n\n// If the message already has a topic set for routing, preserve it\nif (msg.topic && (msg.topic.startsWith('todo/log/') || msg.topic === 'startup')) {\n    // Keep the existing topic\n    // This ensures API messages keep their original routing\n    return msg;\n}\n\n// For messages without a specific topic (like direct log entries)\nif (msg.payload) {\n    // Set the topic for routing to display in UI\n    msg.topic = \"todo/log/new_entry\";\n\n    // The payload could be from API or MQTT\n    // Make sure timestamp is properly parsed\n    if (typeof msg.payload.timestamp === 'string') {\n        // Create a Date object from the ISO string\n        const timestamp = new Date(msg.payload.timestamp);\n        msg.payload.timestamp = timestamp;\n    }\n\n    return msg;\n} else {\n    return null;\n} \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1394.999994277954,
        "wires": [
            [
                "747961116aa3f32c"
            ]
        ]
    },
    {
        "id": "84a9ef1963f32caa",
        "type": "mqtt in",
        "z": "e890cb64b583ae67",
        "d": true,
        "g": "b00e1184cd8b1e60",
        "name": "Todo Log Events (Legacy)",
        "topic": "todo/log/#",
        "qos": "0",
        "datatype": "json",
        "broker": "5b41a831.e6efd8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1394.999994277954,
        "wires": [
            [
                "3cbf884ecef064d0"
            ]
        ]
    },
    {
        "id": "38af39d874d40466",
        "type": "link in",
        "z": "e890cb64b583ae67",
        "g": "b00e1184cd8b1e60",
        "name": "mqtt-out-todo-log",
        "links": [
            "2459651df7739072"
        ],
        "x": 225,
        "y": 1334.999994277954,
        "wires": [
            [
                "3cbf884ecef064d0"
            ]
        ]
    },
    {
        "id": "747961116aa3f32c",
        "type": "switch",
        "z": "e890cb64b583ae67",
        "g": "b00e1184cd8b1e60",
        "name": "Route Log Messages",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "todo/log/new_entry",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/log/response",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/log/request",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/log/api_request",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/log/mongodb_query",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "startup",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 419.00001525878906,
        "y": 1514.0000247955322,
        "wires": [
            [
                "61895d493b9f923c"
            ],
            [
                "61895d493b9f923c"
            ],
            [
                "7924b3da6c8fcf17"
            ],
            [],
            [
                "7924b3da6c8fcf17"
            ],
            [
                "7924b3da6c8fcf17"
            ]
        ]
    },
    {
        "id": "61895d493b9f923c",
        "type": "ui_template",
        "z": "e890cb64b583ae67",
        "g": "d8ac93aea5cc3164",
        "group": "g-todo-logs",
        "name": "Todo Log Template",
        "order": 1,
        "width": "0",
        "height": "0",
        "format": "<!-- Todo Log Panel for FastMCP Todo Server Dashboard -->\n\n<style>\n    .log-container {\n        font-family: 'Roboto', sans-serif;\n        padding: 0 10px;\n    }\n\n    .log-header {\n        background-color: #f5f5f5;\n        border-radius: 8px;\n        padding: 15px;\n        margin-bottom: 20px;\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .log-title {\n        font-size: 24px;\n        font-weight: 500;\n        color: #212121;\n    }\n\n    .log-stats {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 15px;\n    }\n\n    .stats-item {\n        padding: 8px 12px;\n        border-radius: 4px;\n        background-color: #e0e0e0;\n        font-size: 14px;\n        color: #424242;\n    }\n\n    .stats-item.update {\n        background-color: #e3f2fd;\n        color: #1565c0;\n    }\n\n    .stats-item.create {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .stats-item.delete {\n        background-color: #ffebee;\n        color: #c62828;\n    }\n\n    .stats-item.complete {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .log-filters {\n        margin-bottom: 20px;\n        display: flex;\n        gap: 10px;\n        flex-wrap: wrap;\n    }\n\n    .filter-button {\n        padding: 6px 12px;\n        border-radius: 16px;\n        border: 1px solid #e0e0e0;\n        background-color: white;\n        font-size: 13px;\n        cursor: pointer;\n        transition: all 0.2s;\n    }\n\n    .filter-button:hover {\n        background-color: #f5f5f5;\n    }\n\n    .filter-button.active {\n        background-color: #e3f2fd;\n        border-color: #90caf9;\n        color: #1976d2;\n    }\n\n    .log-list {\n        margin-bottom: 20px;\n    }\n\n    .log-card {\n        margin-bottom: 15px;\n        padding: 15px;\n        border-radius: 8px;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);\n        background-color: white;\n        transition: all 0.3s ease;\n        border-left: 6px solid #bdbdbd;\n    }\n\n    .log-card:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .log-card.update {\n        border-left-color: #2196f3;\n    }\n\n    .log-card.create {\n        border-left-color: #4caf50;\n    }\n\n    .log-card.delete {\n        border-left-color: #f44336;\n    }\n\n    .log-card.complete {\n        border-left-color: #4caf50;\n    }\n\n    .log-header-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 10px;\n    }\n\n    .log-type {\n        font-size: 12px;\n        text-transform: uppercase;\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-weight: 500;\n        flex-shrink: 0;\n    }\n\n    .log-type.update {\n        background-color: #e3f2fd;\n        color: #1565c0;\n    }\n\n    .log-type.create {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .log-type.delete {\n        background-color: #ffebee;\n        color: #c62828;\n    }\n\n    .log-type.complete {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .log-timestamp {\n        color: #757575;\n        font-size: 13px;\n    }\n\n    .log-title {\n        font-weight: 500;\n        font-size: 16px;\n        color: #212121;\n        margin: 10px 0;\n    }\n\n    .log-project {\n        display: inline-block;\n        padding: 2px 8px;\n        border-radius: 12px;\n        background-color: #f5f5f5;\n        color: #616161;\n        font-size: 12px;\n        margin-right: 8px;\n    }\n\n    .log-changes {\n        margin-top: 10px;\n        font-size: 14px;\n        color: #424242;\n    }\n\n    .change-item {\n        margin-bottom: 5px;\n        padding-left: 15px;\n        position: relative;\n    }\n\n    .change-item::before {\n        content: '•';\n        position: absolute;\n        left: 0;\n        color: #9e9e9e;\n    }\n\n    .field-name {\n        font-weight: 500;\n        margin-right: 5px;\n    }\n\n    .previous-value {\n        text-decoration: line-through;\n        color: #f44336;\n        margin-right: 5px;\n    }\n\n    .new-value {\n        color: #4caf50;\n    }\n\n    .no-logs {\n        padding: 20px;\n        text-align: center;\n        color: #757575;\n        font-style: italic;\n    }\n\n    .load-more {\n        padding: 10px;\n        text-align: center;\n        background-color: #f5f5f5;\n        border-radius: 4px;\n        margin-top: 15px;\n        cursor: pointer;\n    }\n\n    .load-more:hover {\n        background-color: #e0e0e0;\n    }\n</style>\n\n<div class=\"log-container\" ng-init=\"init()\">\n    <div class=\"log-header\">\n        <div class=\"log-title\">Todo Activity Log</div>\n        <div class=\"log-stats\">\n            <div class=\"stats-item update\">{{updateCount}} Updates</div>\n            <div class=\"stats-item create\">{{createCount}} Creates</div>\n            <div class=\"stats-item delete\">{{deleteCount}} Deletes</div>\n            <div class=\"stats-item complete\">{{completeCount}} Completions</div>\n        </div>\n    </div>\n\n    <!-- Add debug info section (hidden by default) -->\n    <div style=\"padding: 5px; margin-bottom: 10px; background-color: #f0f0f0; border-radius: 4px;\" ng-show=\"showDebug\">\n        <div><strong>Debug Info:</strong> <button ng-click=\"showDebug = !showDebug\">Hide</button></div>\n        <div>Log Entries: {{logEntries.length}}</div>\n        <div>Error: {{error}}</div>\n        <div>Last Response: {{lastResponse}}</div>\n    </div>\n    <div style=\"text-align: right; margin: -10px 0 10px;\">\n        <button ng-click=\"showDebug = !showDebug\" style=\"font-size: 10px; padding: 2px 5px;\">{{showDebug ? 'Hide' : 'Show'}} Debug</button>\n        <button ng-click=\"refreshLogs()\" style=\"font-size: 10px; padding: 2px 5px; margin-left: 5px;\">Refresh</button>\n    </div>\n\n    <div class=\"log-filters\">\n        <button class=\"filter-button\" ng-class=\"{active: currentFilter === 'all'}\" ng-click=\"setFilter('all')\">All Activity</button>\n        <button class=\"filter-button\" ng-class=\"{active: currentFilter === 'update'}\" ng-click=\"setFilter('update')\">Updates</button>\n        <button class=\"filter-button\" ng-class=\"{active: currentFilter === 'create'}\" ng-click=\"setFilter('create')\">Creates</button>\n        <button class=\"filter-button\" ng-class=\"{active: currentFilter === 'delete'}\" ng-click=\"setFilter('delete')\">Deletes</button>\n        <button class=\"filter-button\" ng-class=\"{active: currentFilter === 'complete'}\" ng-click=\"setFilter('complete')\">Completions</button>\\n        <!-- Project filter dropdown would go here -->\n        <select class=\"filter-button\" ng-model=\"projectFilter\" ng-change=\"filterByProject()\">\n            <option value=\"all\">All Projects</option>\n            <option ng-repeat=\"project in projects\" value=\"{{project}}\">{{project}}</option>\n        </select>\n    </div>\n\n    <div class=\"log-list\">\n        <div ng-if=\"logEntries.length === 0\" class=\"no-logs\">\n            No activity logs found matching your filters.\n            <div ng-if=\"loading\">Loading...</div>\n        </div>\n\n        <div ng-repeat=\"entry in logEntries | filter:applyFilters\" class=\"log-card\" ng-class=\"entry.operation\">\n            <div class=\"log-header-row\">\n                <span class=\"log-type\" ng-class=\"entry.operation\">{{entry.operation}}</span>\n                <span class=\"log-timestamp\">{{formatDate(entry.timestamp)}}</span>\n            </div>\n\n            <div class=\"log-title\">{{entry.todoTitle || 'Untitled Todo'}}</div>\n\n            <div>\n                <span class=\"log-project\">{{entry.project || 'No Project'}}</span>\n                <span class=\"log-id\">ID: {{entry.todoId}}</span>\n            </div>\n\n            <div class=\"log-changes\" ng-if=\"entry.changes\">\n                <div class=\"change-item\" ng-repeat=\"change in entry.changes\">\n                    <span class=\"field-name\">{{change.field}}:</span>\n                    <span class=\"previous-value\">{{formatValue(change.oldValue)}}</span>\n                    <span class=\"new-value\">{{formatValue(change.newValue)}}</span>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"load-more\" ng-if=\"hasMoreLogs\" ng-click=\"loadMoreLogs()\">\n            Load More\n        </div>\n    </div>\n</div>\n\n<script>\n    /* globals scope, events, $ */\n(function(scope) {\n    // Initialize the controller\n    scope.init = function() {\n        console.log('Todo Log Panel initialized');\n        scope.logEntries = [];\n        scope.currentFilter = 'all';\n        scope.projectFilter = 'all';\n        scope.projects = [\n            \"All Projects\",\n            \"regressiontestkit\",\n            \"madness_interactive\",\n            \"omnispindle\",\n            \"swarmonomicon\",\n            \"balena_device_management\",\n            \"cogwyrm\",\n            \"docker_implementation\",\n            \"documentation\",\n            \"eventghost-rust\",\n            \"fastmcp\",\n            \"hammerghost\",\n            \"hammerspoon\",\n            \"quality_assurance\",\n            \"spindlewrit\"\n        ];\n        scope.updateCount = 0;\n        scope.createCount = 0;\n        scope.deleteCount = 0;\n        scope.completeCount = 0;\n        scope.pageSize = 20;\n        scope.currentPage = 1;\n        scope.hasMoreLogs = false;\n        scope.showDebug = false;\n        scope.error = null;\n        scope.lastResponse = 'None';\n        scope.loading = false;\n\n        // Load initial data\n        scope.refreshLogs();\n\n        // Listen for new log entries\n        events.on('todo/log/new_entry', function(msg) {\n            console.log('Received todo/log/new_entry event', msg);\n            if (msg && msg.payload) {\n                // Add to the top of the list\n                scope.logEntries.unshift(msg.payload);\n                scope.updateCounts();\n                scope.$apply();\n            }\n        });\n\n        // Listen for log response events\n        events.on('todo/log/response', function(msg) {\n            console.log('Received todo/log/response event', msg);\n            scope.handleLogResponse(msg);\n        });\n\n        // Listen for refresh requests\n        events.on('todo/log/refresh', function() {\n            console.log('Received refresh event');\n            scope.refreshLogs();\n        });\n    };\n\n    // Refresh logs from the server\n    scope.refreshLogs = function() {\n        console.log('Refreshing logs, filter:', scope.currentFilter, 'project:', scope.projectFilter);\n        scope.loading = true;\n        scope.send({\n            topic: 'todo/log/request',\n            payload: {\n                action: 'get_logs',\n                page: scope.currentPage,\n                pageSize: scope.pageSize,\n                filter: scope.currentFilter,\n                project: scope.projectFilter\n            }\n        });\n    };\n\n    // Format date for display\n    scope.formatDate = function(timestamp) {\n        if (!timestamp) return 'Unknown';\n\n        const date = new Date(timestamp);\n        return date.toLocaleString();\n    };\n\n    // Format values for display\n    scope.formatValue = function(value) {\n        if (value === undefined || value === null) return 'None';\n        if (typeof value === 'object') return JSON.stringify(value);\n        return value.toString();\n    };\n\n    // Set the current filter\n    scope.setFilter = function(filter) {\n        scope.currentFilter = filter;\n        scope.currentPage = 1;\n        scope.refreshLogs();\n    };\n\n    // Filter by project\n    scope.filterByProject = function() {\n        scope.currentPage = 1;\n        scope.refreshLogs();\n    };\n\n    // Apply filters to the log entries\n    scope.applyFilters = function(entry) {\n        // Operation type filter\n        if (scope.currentFilter !== 'all' && entry.operation !== scope.currentFilter) {\n            return false;\n        }\n\n        // Project filter\n        if (scope.projectFilter !== 'all' && entry.project !== scope.projectFilter) {\n            return false;\n        }\n\n        return true;\n    };\n\n    // Load more logs\n    scope.loadMoreLogs = function() {\n        scope.currentPage++;\n        console.log('Loading more logs, page:', scope.currentPage);\n        scope.loading = true;\n\n        scope.send({\n            topic: 'todo/log/request',\n            payload: {\n                action: 'get_logs',\n                page: scope.currentPage,\n                pageSize: scope.pageSize,\n                filter: scope.currentFilter,\n                project: scope.projectFilter,\n                append: true\n            }\n        });\n    };\n\n    // Update the counts\n    scope.updateCounts = function() {\n        scope.updateCount = scope.logEntries.filter(e => e.operation === 'update').length;\n        scope.createCount = scope.logEntries.filter(e => e.operation === 'create').length;\n        scope.deleteCount = scope.logEntries.filter(e => e.operation === 'delete').length;\n        scope.completeCount = scope.logEntries.filter(e => e.operation === 'complete').length;\n    };\n\n    // Handle log response data\n    scope.handleLogResponse = function(msg) {\n        if (!msg || !msg.payload) {\n            console.error('Empty log response');\n            scope.error = 'Empty response';\n            scope.loading = false;\n            scope.$apply();\n            return;\n        }\n\n        try {\n            console.log('Processing log response:', msg.payload);\n            scope.lastResponse = JSON.stringify(msg.payload).substring(0, 100) + '...';\n            \n            if (msg.payload.error) {\n                console.error('Error in log response:', msg.payload.error);\n                scope.error = msg.payload.error;\n                scope.loading = false;\n                scope.$apply();\n                return;\n            }\n\n            if (msg.payload.logEntries) {\n                console.log('Found ' + msg.payload.logEntries.length + ' log entries');\n                if (msg.payload.append) {\n                    scope.logEntries = scope.logEntries.concat(msg.payload.logEntries);\n                } else {\n                    scope.logEntries = msg.payload.logEntries;\n                }\n\n                scope.hasMoreLogs = msg.payload.hasMore;\n                if (msg.payload.projects && msg.payload.projects.length) {\n                    scope.projects = [\"all\"].concat(msg.payload.projects);\n                }\n                scope.updateCounts();\n                scope.loading = false;\n                scope.$apply();\n            } else {\n                console.warn('No log entries in response');\n                scope.error = 'No log entries found in response';\n                scope.loading = false;\n                scope.$apply();\n            }\n        } catch (err) {\n            console.error('Error processing log response:', err);\n            scope.error = 'Error processing response: ' + err.message;\n            scope.loading = false;\n            scope.$apply();\n        }\n    };\n\n    // Handle received log data\n    scope.$on('msg', function(msg) {\n        console.log('Received msg in template:', msg);\n        if (!msg || !msg.payload) {\n            console.error('Empty message received in template');\n            return;\n        }\n\n        // Handle the message based on topic\n        if (msg.topic === 'todo/log/response') {\n            scope.handleLogResponse(msg);\n        } else if (msg.topic === 'todo/log/new_entry') {\n            if (msg.payload) {\n                console.log('Adding new log entry to list');\n                scope.logEntries.unshift(msg.payload);\n                scope.updateCounts();\n            }\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 950.0000152587891,
        "y": 1388.0000247955322,
        "wires": [
            []
        ]
    },
    {
        "id": "4d2411ea8b25c6e2",
        "type": "ui_ui_control",
        "z": "e890cb64b583ae67",
        "g": "d8ac93aea5cc3164",
        "name": "UI Control",
        "events": "all",
        "x": 690.0000152587891,
        "y": 1448.0000247955322,
        "wires": [
            [
                "5667be82e2f38333"
            ]
        ]
    },
    {
        "id": "7924b3da6c8fcf17",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "2ff18052d788c794",
        "name": "Query TodoLogService API",
        "func": "// This function handles requests for todo logs from the UI\n// It calls the Omnispindle API to get logs instead of querying MongoDB directly\n\n// Debug function to help troubleshoot\nfunction debugObject(obj, prefix = '') {\n    if (!obj) return 'null';\n    if (typeof obj === 'object') {\n        return prefix + JSON.stringify(obj, null, 2);\n    }\n    return prefix + obj;\n}\n\nif (msg.payload && msg.payload.action === 'get_logs') {\n    // Extract request parameters\n    const page = msg.payload.page || 1;\n    const pageSize = msg.payload.pageSize || 20;\n    const filter = msg.payload.filter || 'all';\n    const project = msg.payload.project || 'all';\n    const append = msg.payload.append || false;\n\n    // Try direct MongoDB query as a fallback\n    // This is more reliable when running on the same machine as MongoDB\n    const collection = 'todo_logs';\n    const mongoQuery = {};\n    \n    // Apply operation filter if specified\n    if (filter !== 'all') {\n        mongoQuery.operation = filter;\n    }\n    \n    // Apply project filter if specified\n    if (project !== 'all') {\n        mongoQuery.project = project;\n    }\n    \n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Querying MongoDB directly\" });\n    node.warn(\"Querying MongoDB collection: \" + collection);\n    \n    // Create MongoDB query message\n    return [{\n        topic: 'todo/log/mongodb_query',\n        collection: collection,\n        operation: 'find',\n        payload: mongoQuery,\n        limit: pageSize,\n        skip: (page - 1) * pageSize,\n        sort: { timestamp: -1 },\n        projection: {},\n        append: append\n    }];\n}\n\n// If it's a response from MongoDB\nif (msg.topic === 'todo/log/mongodb_response' || \n    (msg.collection === 'todo_logs' && Array.isArray(msg.payload))) {\n    try {\n        const logEntries = msg.payload;\n        const append = msg.append || false;\n        \n        // Debug information\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Found \" + logEntries.length + \" log entries\" });\n        node.warn(\"MongoDB query returned \" + logEntries.length + \" results\");\n        \n        // Get unique projects for filtering\n        const projects = [...new Set(logEntries.map(entry => entry.project).filter(Boolean))];\n        \n        // Format the MongoDB response for the dashboard\n        return [{\n            topic: 'todo/log/response',\n            payload: {\n                logEntries: logEntries,\n                totalCount: logEntries.length,  // This is an approximation\n                page: msg.skip ? (msg.skip / msg.limit) + 1 : 1,\n                pageSize: msg.limit || 20,\n                hasMore: logEntries.length >= (msg.limit || 20),  // Approximation\n                projects: projects,\n                append: append\n            }\n        }];\n    } catch (err) {\n        // Error parsing the response\n        node.error(\"Exception processing MongoDB response: \" + err.message);\n        return [{\n            topic: 'todo/log/response',\n            payload: {\n                error: 'Error processing MongoDB response: ' + err.message,\n                logEntries: [],\n                debug: debugObject(msg.payload)\n            }\n        }];\n    }\n}\n\n// If it's a response from the API, format it for the UI\nif (msg.topic === 'todo/log/api_response' || msg.statusCode) {\n    try {\n        const response = msg.payload;\n        const append = msg.append || false;\n\n        // Debug information\n        node.status({ fill: \"blue\", shape: \"dot\", text: \"Received API response\" });\n\n        // Accept any response format that contains log entries\n        // This makes the code more flexible with different API response structures\n        let logEntries = [];\n        let totalCount = 0;\n        let page = 1;\n        let pageSize = 20;\n        let hasMore = false;\n        let projects = [];\n\n        // Try to extract data from various possible response formats\n        if (response.data && response.data.logs) {\n            // Format 1: {data: {logs: [...], ...}}\n            logEntries = response.data.logs;\n            totalCount = response.data.totalCount || response.data.count || logEntries.length;\n            page = response.data.page || 1;\n            pageSize = response.data.pageSize || 20;\n            hasMore = response.data.hasMore || false;\n            projects = response.data.projects || [];\n        } else if (response.data && response.data.logEntries) {\n            // Format 2: {data: {logEntries: [...], ...}}\n            logEntries = response.data.logEntries;\n            totalCount = response.data.totalCount || response.data.count || logEntries.length;\n            page = response.data.page || 1;\n            pageSize = response.data.pageSize || 20;\n            hasMore = response.data.hasMore || false;\n            projects = response.data.projects || [];\n        } else if (response.logs) {\n            // Format 3: {logs: [...], ...}\n            logEntries = response.logs;\n            totalCount = response.totalCount || response.count || logEntries.length;\n            page = response.page || 1;\n            pageSize = response.pageSize || 20;\n            hasMore = response.hasMore || false;\n            projects = response.projects || [];\n        } else if (response.logEntries) {\n            // Format 4: {logEntries: [...], ...}\n            logEntries = response.logEntries;\n            totalCount = response.totalCount || response.count || logEntries.length;\n            page = response.page || 1;\n            pageSize = response.pageSize || 20;\n            hasMore = response.hasMore || false;\n            projects = response.projects || [];\n        } else if (Array.isArray(response)) {\n            // Format 5: Direct array of logs\n            logEntries = response;\n            totalCount = logEntries.length;\n            hasMore = false;\n        } else if (response.items && Array.isArray(response.items)) {\n            // Format 6: {items: [...], count: X}\n            logEntries = response.items;\n            totalCount = response.count || logEntries.length;\n            hasMore = logEntries.length < totalCount;\n        }\n\n        // Format the response for the dashboard\n        return [{\n            topic: 'todo/log/response',\n            payload: {\n                logEntries: logEntries,\n                totalCount: totalCount,\n                page: page,\n                pageSize: pageSize,\n                hasMore: hasMore,\n                projects: projects,\n                append: append\n            }\n        }];\n    } catch (err) {\n        // Error parsing the response\n        node.error(\"Exception processing API response: \" + err.message + \"\\nPayload: \" + debugObject(msg.payload));\n        return [{\n            topic: 'todo/log/response',\n            payload: {\n                error: 'Error processing API response: ' + err.message,\n                logEntries: [],\n                debug: debugObject(msg.payload)\n            }\n        }];\n    }\n}\n\n// Initial data load - trigger an API request automatically on startup\n// This ensures logs are loaded without waiting for user interaction\nif (msg.topic === 'startup') {\n    return [{\n        topic: 'todo/log/request',\n        payload: {\n            action: 'get_logs',\n            page: 1,\n            pageSize: 20,\n            filter: 'all',\n            project: 'all'\n        }\n    }];\n}\n\n// Pass through other messages\nreturn null; \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Initialize settings\nnode.status({fill:\"green\", shape:\"dot\", text:\"Ready to query todo logs\"});\n\n// Trigger initial data load\nsetTimeout(function() {\n    node.send({\n        topic: 'startup',\n        payload: {}\n    });\n}, 1500);",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1580,
        "wires": [
            [
                "c592d993a8632904"
            ]
        ]
    },
    {
        "id": "c592d993a8632904",
        "type": "mongodb4",
        "z": "e890cb64b583ae67",
        "g": "2ff18052d788c794",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todo_log",
        "operation": "",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "MongoDB Query",
        "x": 950,
        "y": 1580,
        "wires": [
            [
                "e880dcb008ea23b1"
            ]
        ]
    },
    {
        "id": "5667be82e2f38333",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "d8ac93aea5cc3164",
        "name": "Tab Init",
        "func": "// Handle tab selection to refresh logs when tab is shown\nif (msg.payload && msg.payload.tab === \"t-todo-logs\") {\n    // Tab was selected, refresh logs if needed\n    return {\n        topic: \"todo/log/refresh\",\n        payload: {}\n    };\n}\n\n// Pass through other messages\nreturn msg; \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840.0000152587891,
        "y": 1428.0000247955322,
        "wires": [
            [
                "61895d493b9f923c"
            ]
        ]
    },
    {
        "id": "e880dcb008ea23b1",
        "type": "function",
        "z": "e890cb64b583ae67",
        "g": "2ff18052d788c794",
        "name": "Process Response",
        "func": "// Process API or MongoDB response\n// Add debug info for tracing responses\n\n// Check if this is a MongoDB response\nif (msg.collection === 'todo_logs' && Array.isArray(msg.payload)) {\n    node.warn(\"Received MongoDB response with \" + msg.payload.length + \" entries\");\n    msg.topic = 'todo/log/mongodb_response';\n    // Copy all the MongoDB query parameters\n    msg.limit = msg.limit || 20;\n    msg.skip = msg.skip || 0;\n    return msg;\n}\n\n// Handle API response\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"Response received\" });\n\n// Set topic for consistent routing\nmsg.topic = 'todo/log/response';\n\n// Preserve the append flag\nmsg.append = msg.append || false;\n\n// Debug response in logs\nif (msg.statusCode >= 400) {\n    node.error(\"HTTP Error: \" + msg.statusCode + \", response: \" + JSON.stringify(msg.payload));\n    // Return error message\n    return [{\n        topic: 'todo/log/response',\n        payload: {\n            error: 'HTTP Error: ' + msg.statusCode,\n            logEntries: [],\n            debug: JSON.stringify(msg.payload)\n        }\n    }];\n}\n\nnode.warn(\"Response processed successfully\");\n\nreturn msg; \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1580,
        "wires": [
            [
                "61895d493b9f923c"
            ]
        ]
    },
    {
        "id": "22fe2f4657d2ae92",
        "type": "ui_spacer",
        "z": "e890cb64b583ae67",
        "name": "spacer",
        "group": "g-controls",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "f1af9ddbe91dc748",
        "type": "ui_spacer",
        "z": "e890cb64b583ae67",
        "name": "spacer",
        "group": "g-controls",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "25684f6436fd958f",
        "type": "ui_spacer",
        "z": "e890cb64b583ae67",
        "name": "spacer",
        "group": "g-controls",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "ee0886f938687322",
        "type": "ui_spacer",
        "z": "e890cb64b583ae67",
        "name": "spacer",
        "group": "g-controls",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "83b072fcd329dfe9",
        "type": "ui_spacer",
        "z": "e890cb64b583ae67",
        "name": "spacer",
        "group": "g-controls",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "6bdead9d2068dc14",
        "type": "ui_spacer",
        "z": "e890cb64b583ae67",
        "name": "spacer",
        "group": "g-controls",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "dec622c8f190f9d9",
        "type": "ui_spacer",
        "z": "e890cb64b583ae67",
        "name": "spacer",
        "group": "g-controls",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "ee6eeced0933a715",
        "type": "ui_spacer",
        "z": "e890cb64b583ae67",
        "name": "spacer",
        "group": "g-controls",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "9e3846a8b16879a3",
        "type": "ui_spacer",
        "z": "e890cb64b583ae67",
        "name": "spacer",
        "group": "g-todos",
        "order": 15,
        "width": 4,
        "height": 1
    },
    {
        "id": "345f844e60cb4658",
        "type": "ui_spacer",
        "z": "e890cb64b583ae67",
        "name": "spacer",
        "group": "g-todos",
        "order": 19,
        "width": 16,
        "height": 1
    },
    {
        "id": "1cdab81a6028b016",
        "type": "mongodb4-client",
        "name": "swarmonomicon",
        "protocol": "mongodb",
        "hostname": "127.0.0.1",
        "port": "",
        "dbName": "swarmonomicon",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "g-todos",
        "type": "ui_group",
        "name": "Todo List",
        "tab": "t-dashboard",
        "order": 1,
        "disp": true,
        "width": 16,
        "collapse": false
    },
    {
        "id": "fed465747110fa96",
        "type": "ui_group",
        "name": "Item Editor",
        "tab": "t-dashboard",
        "order": 2,
        "disp": true,
        "width": 18,
        "collapse": false
    },
    {
        "id": "5b41a831.e6efd8",
        "type": "mqtt-broker",
        "name": "eaws",
        "broker": "localhost",
        "port": "4140",
        "clientid": "local-node-red",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": false,
        "autoUnsubscribe": true,
        "birthTopic": "status/DvtLabMonitor/alive",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "1",
        "birthMsg": {},
        "closeTopic": "status/DvtLabMonitor/alive",
        "closeQos": "1",
        "closeRetain": "true",
        "closePayload": "0",
        "closeMsg": {},
        "willTopic": "status/DvtLabMonitor/alive",
        "willQos": "1",
        "willRetain": "true",
        "willPayload": "0",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "g-todo-logs",
        "type": "ui_group",
        "name": "Todo Activity Logs",
        "tab": "t-dashboard",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "g-controls",
        "type": "ui_group",
        "name": "Dashboard Controls",
        "tab": "6566ab311909150b",
        "order": 1,
        "disp": true,
        "width": 18,
        "collapse": false,
        "className": ""
    },
    {
        "id": "t-dashboard",
        "type": "ui_tab",
        "name": "Omnispindle",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6566ab311909150b",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": false
    }
]
